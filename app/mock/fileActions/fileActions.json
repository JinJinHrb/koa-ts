{
  "message": "ok",
  "data": [
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "routerActions",
              "sourceValue": "actions/router",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/router.ts",
              "exportNames": ["locationInit", "matchPublicRouter", "matchPrivateRouter"]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "intlActions",
              "sourceValue": "actions/intl",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/intl.ts",
              "exportNames": ["setLocale"]
            },
            {
              "isNamespace": true,
              "localName": "xshieldActions",
              "sourceValue": "actions/xshield",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xshield.ts",
              "exportNames": [
                "identityVerifyRequested",
                "identityVerifySucceed",
                "identityVerifyFailed",
                "xshieldBindRequested",
                "xshieldBindSucceed",
                "xshieldBindFailed",
                "xshieldUnBindRequested",
                "xshieldUnBindSucceed",
                "xshieldUnBindFailed",
                "mfaWechatAuthRequested",
                "mfaWechatAuthSucceed",
                "mfaWechatAuthFailed",
                "initMfaWechatAuth",
                "setXshieldBindStep",
                "setMFAVisible",
                "setMFAParam",
                "initXshield",
                "setMFATip",
                "unBindSubAccountRequested",
                "unBindSubAccountSucceed",
                "unBindSubAccountFailed",
                "unBindSubAccountModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "homeActions",
              "sourceValue": "actions/home",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/home.ts",
              "exportNames": [
                "getTagKeywordsRequested",
                "getTagKeywordsSucceed",
                "getTagKeywordsFailed",
                "getKeywordsRequested",
                "getKeywordsSucceed",
                "getKeywordsFailed",
                "getTopArticlesRequested",
                "getTopArticlesSucceed",
                "getTopArticlesFailed",
                "getNewsListRequested",
                "getNewsListSucceed",
                "getNewsListFailed",
                "getMoreNewsListSucceed",
                "getTagListRequested",
                "getTagListSucceed",
                "getTagListFailed",
                "getTagInfoListRequested",
                "getTagInfoListSucceed",
                "getTagInfoListFailed",
                "getLatestNewsRequested",
                "getLatestNewsSucceed",
                "getLatestNewsFailed",
                "getNewsDetailRequested",
                "getNewsDetailSucceed",
                "getNewsDetailFailed",
                "getTagNewsDetailRequested",
                "getTagNewsDetailSucceed",
                "getTagNewsDetailFailed",
                "postContactRequested",
                "postContactSucceed",
                "postContactFailed",
                "closeAdvertise",
                "openAdvertise",
                "advertiseShield",
                "closeContact",
                "openContact",
                "contactShield",
                "queryServerGrantIdRequest",
                "queryServerGrantIdSuccess"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 100,
                  "column": 43,
                  "index": 3247
                },
                "end": {
                  "line": 272,
                  "column": 1,
                  "index": 8533
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "routerActions",
            "utilActions",
            "intlActions",
            "xshieldActions",
            "meActions",
            "vcodeActions",
            "userActions",
            "securityActions",
            "homeActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/ABVPanel/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 58,
                  "index": 968
                },
                "end": {
                  "line": 80,
                  "column": 1,
                  "index": 2344
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["securityActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/MFAPanel/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/xshield",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xshield.ts",
              "exportNames": [
                "identityVerifyRequested",
                "identityVerifySucceed",
                "identityVerifyFailed",
                "xshieldBindRequested",
                "xshieldBindSucceed",
                "xshieldBindFailed",
                "xshieldUnBindRequested",
                "xshieldUnBindSucceed",
                "xshieldUnBindFailed",
                "mfaWechatAuthRequested",
                "mfaWechatAuthSucceed",
                "mfaWechatAuthFailed",
                "initMfaWechatAuth",
                "setXshieldBindStep",
                "setMFAVisible",
                "setMFAParam",
                "initXshield",
                "setMFATip",
                "unBindSubAccountRequested",
                "unBindSubAccountSucceed",
                "unBindSubAccountFailed",
                "unBindSubAccountModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "bindActions",
              "sourceValue": "actions/bind",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/bind.ts",
              "exportNames": [
                "bindRequested",
                "bindSucceed",
                "bindFailed",
                "modifyBindRequested",
                "modifyBindSucceed",
                "modifyBindFailed",
                "setBindStep",
                "resetBindStep",
                "hideBindError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "passwordActions",
              "sourceValue": "actions/password",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/password.ts",
              "exportNames": [
                "modifyTradePasswordRequested",
                "modifyTradePasswordSucceed",
                "modifyTradePasswordFailed",
                "initModifyTradePassword",
                "forgotTradePasswordRequested",
                "forgotTradePasswordSucceed",
                "forgotTradePasswordFailed",
                "initForgotTradePassword",
                "setTradePasswordRequested",
                "setTradePasswordSucceed",
                "setTradePasswordFailed",
                "initSetTradePassword",
                "modifyLoginPasswordRequested",
                "modifyLoginPasswordSucceed",
                "modifyLoginPasswordFailed",
                "setModifyLoginPasswordStep",
                "resetModifyLoginPassword",
                "hideModifyLoginPasswordError",
                "initLoginPasswordRequested",
                "initLoginPasswordSucceed",
                "initLoginPasswordFailed",
                "initInitLoginPassword"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 97,
                  "column": 52,
                  "index": 3240
                },
                "end": {
                  "line": 418,
                  "column": 1,
                  "index": 13234
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "bindActions",
            "passwordActions",
            "vcodeActions",
            "withdrawalsActions",
            "withdrawActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 26,
                  "column": 41,
                  "index": 834
                },
                "end": {
                  "line": 55,
                  "column": 1,
                  "index": 1781
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 63,
                  "column": 44,
                  "index": 1926
                },
                "end": {
                  "line": 124,
                  "column": 1,
                  "index": 3413
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 131,
                  "column": 47,
                  "index": 3560
                },
                "end": {
                  "line": 183,
                  "column": 1,
                  "index": 4793
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/BindEmailModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "BindEmailModal",
              "loc": {
                "start": {
                  "line": 59,
                  "column": 2,
                  "index": 1471
                },
                "end": {
                  "line": 59,
                  "column": 16,
                  "index": 1485
                },
                "identifierName": "BindEmailModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions", "userActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/ServiceProtocolModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ServiceProtocolModal",
              "loc": {
                "start": {
                  "line": 147,
                  "column": 3,
                  "index": 3995
                },
                "end": {
                  "line": 147,
                  "column": 23,
                  "index": 4015
                },
                "identifierName": "ServiceProtocolModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ServiceProtocolModal",
              "loc": {
                "start": {
                  "line": 147,
                  "column": 3,
                  "index": 3995
                },
                "end": {
                  "line": 147,
                  "column": 23,
                  "index": 4015
                },
                "identifierName": "ServiceProtocolModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions", "meActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/SetLoginPasswordModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "SetLoginPasswordModal",
              "loc": {
                "start": {
                  "line": 68,
                  "column": 60,
                  "index": 1766
                },
                "end": {
                  "line": 68,
                  "column": 81,
                  "index": 1787
                },
                "identifierName": "SetLoginPasswordModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions", "userActions", "utilActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/FirstRegisterStep/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "firmActions",
              "sourceValue": "actions/firm",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/firm.ts",
              "exportNames": [
                "fetchFirmRequested",
                "fetchFirmSucceed",
                "fetchFirmFailed",
                "hideFetchFirmError",
                "resetFirmVerifyInfo",
                "firmRegistedIdExistRequested",
                "firmRegistedIdExistSucceed",
                "firmRegistedIdExistFailed",
                "hideFirmRegistedIdExistError",
                "resetFirmRegistedIdExist",
                "toggleFirmVerifyInitLoading",
                "toggleFirmVerifyTip",
                "checkEngNameExistRequested",
                "checkEngNameExistSucceed",
                "checkEngNameExistFailed",
                "hideCheckEngNameExistError",
                "resetCheckEngNameExist",
                "presetCountriesRequested",
                "presetCountriesSucceed",
                "presetCountriesFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 30,
                  "column": 57,
                  "index": 830
                },
                "end": {
                  "line": 63,
                  "column": 1,
                  "index": 1780
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["firmActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "uiActions",
              "sourceValue": "actions/ui",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ui.ts",
              "exportNames": [
                "toggleMobileNavSidebar",
                "toggleSubAppLoading",
                "setSubAppError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "navActions",
              "sourceValue": "actions/nav",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/nav.ts",
              "exportNames": [
                "sideNavbarRequested",
                "sideNavbarSucceed",
                "sideNavbarFailed",
                "resetSideNavbar"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xshieldActions",
              "sourceValue": "actions/xshield",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xshield.ts",
              "exportNames": [
                "identityVerifyRequested",
                "identityVerifySucceed",
                "identityVerifyFailed",
                "xshieldBindRequested",
                "xshieldBindSucceed",
                "xshieldBindFailed",
                "xshieldUnBindRequested",
                "xshieldUnBindSucceed",
                "xshieldUnBindFailed",
                "mfaWechatAuthRequested",
                "mfaWechatAuthSucceed",
                "mfaWechatAuthFailed",
                "initMfaWechatAuth",
                "setXshieldBindStep",
                "setMFAVisible",
                "setMFAParam",
                "initXshield",
                "setMFATip",
                "unBindSubAccountRequested",
                "unBindSubAccountSucceed",
                "unBindSubAccountFailed",
                "unBindSubAccountModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "protocolActions",
              "sourceValue": "actions/protocol",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/protocol.ts",
              "exportNames": [
                "checkAgreedRequested",
                "checkAgreedSucceed",
                "checkAgreedFailed",
                "sendAgreementRequested",
                "sendAgreementSucceed",
                "sendAgreementFailed",
                "getProtocolContentRequested",
                "getProtocolContentSucceed",
                "getProtocolContentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "appActions",
              "sourceValue": "actions/app",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/app.ts",
              "exportNames": ["userCheckFuncs", "userConfirmNewFuncOrChange"]
            },
            {
              "isNamespace": false,
              "localName": "modalActions",
              "importedName": "modalActions",
              "sourceValue": "actions",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/index.ts"
            },
            {
              "isNamespace": false,
              "localName": "queryCountriesIfNeeded",
              "importedName": "queryCountriesIfNeeded",
              "sourceValue": "actions/addressLocations",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/addressLocations.ts"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 97,
                  "column": 59,
                  "index": 3552
                },
                "end": {
                  "line": 355,
                  "column": 1,
                  "index": 11770
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "uiActions",
            "navActions",
            "meActions",
            "xshieldActions",
            "protocolActions",
            "userActions",
            "appActions",
            "modalActions"
          ],
          "objectPropertyMap": {
            "queryCountriesIfNeeded": "queryCountriesIfNeeded",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/DashboardHome/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 256,
                  "column": 48,
                  "index": 8203
                },
                "end": {
                  "line": 887,
                  "column": 1,
                  "index": 27276
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["meActions"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "rateActions",
              "sourceValue": "actions/rate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/rate.ts",
              "exportNames": [
                "getExchangeRateRequested",
                "getExchangeRateSucceed",
                "getExchangeRateFailed",
                "hideGetExchangeRateError",
                "getNormalRateListRequested",
                "getNormalRateListSucceed",
                "getNormalRateListFailed",
                "hideGetNormalRateListError",
                "setRefreshTime",
                "killLoopGetRate"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xshieldActions",
              "sourceValue": "actions/xshield",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xshield.ts",
              "exportNames": [
                "identityVerifyRequested",
                "identityVerifySucceed",
                "identityVerifyFailed",
                "xshieldBindRequested",
                "xshieldBindSucceed",
                "xshieldBindFailed",
                "xshieldUnBindRequested",
                "xshieldUnBindSucceed",
                "xshieldUnBindFailed",
                "mfaWechatAuthRequested",
                "mfaWechatAuthSucceed",
                "mfaWechatAuthFailed",
                "initMfaWechatAuth",
                "setXshieldBindStep",
                "setMFAVisible",
                "setMFAParam",
                "initXshield",
                "setMFATip",
                "unBindSubAccountRequested",
                "unBindSubAccountSucceed",
                "unBindSubAccountFailed",
                "unBindSubAccountModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "trendActions",
              "sourceValue": "actions/trend",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/trend.ts",
              "exportNames": [
                "rateTrendRequested",
                "rateTrendSucceed",
                "rateTrendFailed",
                "resetRateTrend",
                "setRateTrendRange"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "appActions",
              "sourceValue": "actions/app",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/app.ts",
              "exportNames": ["userCheckFuncs", "userConfirmNewFuncOrChange"]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 256,
                  "column": 48,
                  "index": 8203
                },
                "end": {
                  "line": 887,
                  "column": 1,
                  "index": 27276
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "rateActions",
            "xshieldActions",
            "withdrawalsActions",
            "trendActions",
            "metaActions",
            "appActions",
            "submitActions",
            "userActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Collection/CollectionList/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "depositLimitRequested",
              "importedName": "depositLimitRequested",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #230 lastArguments.length !== 1 (start line: 106, start column: 18, end line: 106",
            ", end column: 62)"
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "depositLimitRequested": "depositLimitRequested",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "statusActions",
              "sourceValue": "actions/status",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/status.ts",
              "exportNames": ["toggleEntityStatus"]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 121,
                  "column": 60,
                  "index": 3804
                },
                "end": {
                  "line": 328,
                  "column": 1,
                  "index": 9768
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "statusActions", "withdrawActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/EarnExchange/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "staffActions",
              "sourceValue": "actions/staff",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/staff.ts",
              "exportNames": [
                "staffSuffixRequested",
                "staffSuffixSucceed",
                "staffSuffixFailed",
                "toggleStaffSuffixModal",
                "hideStaffSuffixError",
                "modifyStaffSuffixRequested",
                "modifyStaffSuffixSucceed",
                "modifyStaffSuffixFailed",
                "toggleModifyStaffSuffixModal",
                "resetModifyStaffSuffix",
                "addStaffRequested",
                "addStaffSucceed",
                "addStaffFailed",
                "setAddStaffStep",
                "hideAddStaffError",
                "setAddStaffAccount",
                "resetAddStaff",
                "staffListRequested",
                "staffListSucceed",
                "staffListFailed",
                "setStaffListStatus",
                "resetStaffList",
                "oneStaffInfoRequested",
                "oneStaffInfoSucceed",
                "oneStaffInfoFailed",
                "updateOneStaffRequested",
                "updateOneStaffSucceed",
                "updateOneStaffFailed",
                "hideUpdateOneStaffError",
                "resetUpdateOneStaff",
                "delOneStaffRequested",
                "delOneStaffSucceed",
                "delOneStaffFailed",
                "hideDelOneStaffError",
                "toggleDelOneStaffModal",
                "resetStaffPwRequested",
                "resetStaffPwSucceed",
                "resetStaffPwFailed",
                "genResetStaffPassword",
                "toggleResetStaffPwModal",
                "resetResetStaffPw",
                "assignStaffDepositRequested",
                "assignStaffDepositSucceed",
                "assignStaffDepositFailed",
                "toggleAssignStaffDepositModal",
                "setDepositIdsWaitAssign",
                "addDepositIdsWaitAssign",
                "removeDepositIdsWaitAssign",
                "resetDepositIdsWaitAssign",
                "resetAssignStaffDeposit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "downloadActions",
              "sourceValue": "actions/download",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/download.ts",
              "exportNames": ["downloadRequested", "downloadSucceed", "downloadFailed"]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 202,
                  "column": 52,
                  "index": 5593
                },
                "end": {
                  "line": 1087,
                  "column": 1,
                  "index": 31926
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "staffActions",
            "downloadActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/EarnExchange/EarnExchangeDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "previewActions",
              "sourceValue": "actions/preview",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/preview.ts",
              "exportNames": [
                "preview",
                "previewLoading",
                "removePreview",
                "resetAllPreview"
              ]
            },
            {
              "isNamespace": true,
              "localName": "staffActions",
              "sourceValue": "actions/staff",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/staff.ts",
              "exportNames": [
                "staffSuffixRequested",
                "staffSuffixSucceed",
                "staffSuffixFailed",
                "toggleStaffSuffixModal",
                "hideStaffSuffixError",
                "modifyStaffSuffixRequested",
                "modifyStaffSuffixSucceed",
                "modifyStaffSuffixFailed",
                "toggleModifyStaffSuffixModal",
                "resetModifyStaffSuffix",
                "addStaffRequested",
                "addStaffSucceed",
                "addStaffFailed",
                "setAddStaffStep",
                "hideAddStaffError",
                "setAddStaffAccount",
                "resetAddStaff",
                "staffListRequested",
                "staffListSucceed",
                "staffListFailed",
                "setStaffListStatus",
                "resetStaffList",
                "oneStaffInfoRequested",
                "oneStaffInfoSucceed",
                "oneStaffInfoFailed",
                "updateOneStaffRequested",
                "updateOneStaffSucceed",
                "updateOneStaffFailed",
                "hideUpdateOneStaffError",
                "resetUpdateOneStaff",
                "delOneStaffRequested",
                "delOneStaffSucceed",
                "delOneStaffFailed",
                "hideDelOneStaffError",
                "toggleDelOneStaffModal",
                "resetStaffPwRequested",
                "resetStaffPwSucceed",
                "resetStaffPwFailed",
                "genResetStaffPassword",
                "toggleResetStaffPwModal",
                "resetResetStaffPw",
                "assignStaffDepositRequested",
                "assignStaffDepositSucceed",
                "assignStaffDepositFailed",
                "toggleAssignStaffDepositModal",
                "setDepositIdsWaitAssign",
                "addDepositIdsWaitAssign",
                "removeDepositIdsWaitAssign",
                "resetDepositIdsWaitAssign",
                "resetAssignStaffDeposit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "downloadActions",
              "sourceValue": "actions/download",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/download.ts",
              "exportNames": ["downloadRequested", "downloadSucceed", "downloadFailed"]
            },
            {
              "isNamespace": true,
              "localName": "refundActions",
              "sourceValue": "actions/earnRefund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnRefund.ts",
              "exportNames": [
                "changeStep",
                "setRefundData",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "cancelRefundRequested",
                "cancelRefundSucceed",
                "cancelRefundFailed",
                "resetCancelRefund",
                "setCancelRefundModal"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "EarnExchangeDetail",
              "loc": {
                "start": {
                  "line": 219,
                  "column": 2,
                  "index": 6779
                },
                "end": {
                  "line": 219,
                  "column": 20,
                  "index": 6797
                },
                "identifierName": "EarnExchangeDetail"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "previewActions",
            "staffActions",
            "metaActions",
            "downloadActions",
            "refundActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "earnExchangeAction",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundAction",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": true,
              "localName": "annexAction",
              "sourceValue": "actions/annex",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/annex.ts",
              "exportNames": [
                "uploadAnnexRequested",
                "uploadAnnexSucceed",
                "uploadAnnexFailed",
                "uploadAnnexInit",
                "previewAnnexRequested",
                "previewAnnexSucceed",
                "previewAnnexFailed",
                "previewAnnexInit",
                "deleteAnnex"
              ]
            },
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 73,
                  "column": 64,
                  "index": 2362
                },
                "end": {
                  "line": 276,
                  "column": 1,
                  "index": 8324
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "earnExchangeAction",
            "fundAction",
            "annexAction",
            "refundAction"
          ],
          "objectPropertyMap": {
            "destroy": "destroy",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundChoose/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "RefundChoose",
              "loc": {
                "start": {
                  "line": 114,
                  "column": 13,
                  "index": 3180
                },
                "end": {
                  "line": 114,
                  "column": 25,
                  "index": 3192
                },
                "identifierName": "RefundChoose"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundTT/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "annexAction",
              "sourceValue": "actions/annex",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/annex.ts",
              "exportNames": [
                "uploadAnnexRequested",
                "uploadAnnexSucceed",
                "uploadAnnexFailed",
                "uploadAnnexInit",
                "previewAnnexRequested",
                "previewAnnexSucceed",
                "previewAnnexFailed",
                "previewAnnexInit",
                "deleteAnnex"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 58,
                  "column": 48,
                  "index": 1626
                },
                "end": {
                  "line": 191,
                  "column": 1,
                  "index": 5392
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction", "annexAction", "metaActions"],
          "objectPropertyMap": {
            "change": "change",
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundMSG/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "annexAction",
              "sourceValue": "actions/annex",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/annex.ts",
              "exportNames": [
                "uploadAnnexRequested",
                "uploadAnnexSucceed",
                "uploadAnnexFailed",
                "uploadAnnexInit",
                "previewAnnexRequested",
                "previewAnnexSucceed",
                "previewAnnexFailed",
                "previewAnnexInit",
                "deleteAnnex"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 33,
                  "column": 49,
                  "index": 922
                },
                "end": {
                  "line": 94,
                  "column": 1,
                  "index": 2938
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction", "annexAction"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/ReceiveMoney/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 92,
                  "column": 52,
                  "index": 2357
                },
                "end": {
                  "line": 222,
                  "column": 1,
                  "index": 5798
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/ReceiveMoney/ReceiveMoneyDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 34,
                  "column": 58,
                  "index": 1058
                },
                "end": {
                  "line": 146,
                  "column": 1,
                  "index": 4481
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/FixRate/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts",
              "exportNames": [
                "getFixRateListRequested",
                "getFixRateListSucceed",
                "getFixRateListFailed",
                "hideGetFixRateListError",
                "fixRateTradeRequested",
                "fixRateTradeSucceed",
                "fixRateTradeFailed",
                "hideFixRateTradeError",
                "fixRateTradeModal",
                "resetFixRateTrade",
                "resetTrade",
                "getContractRateRequested",
                "getContractRateSucceed",
                "getContractRateFailed",
                "hideGetContractRateError",
                "updateFixRateCountDownSeconds",
                "stopFixRateCountDown",
                "resetFixRateCountDownSeconds",
                "resetRate",
                "getOneFixRateRequested",
                "getOneFixRateSucceed",
                "getOneFixRateFailed",
                "hideGetOneFixRateError",
                "setCancelItem",
                "resetCancelItem",
                "cancelOneFixRateContractRequested",
                "cancelOneFixRateContractSucceed",
                "cancelOneFixRateContractFailed",
                "hideCancelOneFixRateContractError",
                "cancelOneFixRateContractModal",
                "resetCancelOneFixRateContract",
                "getFixRateMarginFeeRequested",
                "getFixRateMarginFeeSucceed",
                "getFixRateMarginFeeFailed",
                "hideGetFixRateMarginFeeError",
                "resetMarginFee",
                "getFixRateCancelFeeRequested",
                "getFixRateCancelFeeSucceed",
                "getFixRateCancelFeeFailed",
                "hideGetFixRateCancelFeeError",
                "resetFixRateCancelFee",
                "getContractDeadlineRequested",
                "getContractDeadlineSucceed",
                "getContractDeadlineFailed",
                "hideGetContractDeadlineError",
                "resetGetContractDeadline",
                "setFixRateQueryType",
                "validFixRateOrderDateRequested",
                "validFixRateOrderDateSucceed",
                "validFixRateOrderDateFailed",
                "hideValidFixRateOrderDateError",
                "resetValidFixRateOrderDate"
              ]
            },
            {
              "isNamespace": true,
              "localName": "protocolActions",
              "sourceValue": "actions/protocol",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/protocol.ts",
              "exportNames": [
                "checkAgreedRequested",
                "checkAgreedSucceed",
                "checkAgreedFailed",
                "sendAgreementRequested",
                "sendAgreementSucceed",
                "sendAgreementFailed",
                "getProtocolContentRequested",
                "getProtocolContentSucceed",
                "getProtocolContentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "replace",
              "importedName": "replace",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 74,
                  "column": 47,
                  "index": 2045
                },
                "end": {
                  "line": 138,
                  "column": 1,
                  "index": 3863
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "protocolActions", "submitActions"],
          "objectPropertyMap": {
            "goBack": "goBack",
            "replace": "replace"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/FixRate/FixRateInfoList/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts",
              "exportNames": [
                "getFixRateListRequested",
                "getFixRateListSucceed",
                "getFixRateListFailed",
                "hideGetFixRateListError",
                "fixRateTradeRequested",
                "fixRateTradeSucceed",
                "fixRateTradeFailed",
                "hideFixRateTradeError",
                "fixRateTradeModal",
                "resetFixRateTrade",
                "resetTrade",
                "getContractRateRequested",
                "getContractRateSucceed",
                "getContractRateFailed",
                "hideGetContractRateError",
                "updateFixRateCountDownSeconds",
                "stopFixRateCountDown",
                "resetFixRateCountDownSeconds",
                "resetRate",
                "getOneFixRateRequested",
                "getOneFixRateSucceed",
                "getOneFixRateFailed",
                "hideGetOneFixRateError",
                "setCancelItem",
                "resetCancelItem",
                "cancelOneFixRateContractRequested",
                "cancelOneFixRateContractSucceed",
                "cancelOneFixRateContractFailed",
                "hideCancelOneFixRateContractError",
                "cancelOneFixRateContractModal",
                "resetCancelOneFixRateContract",
                "getFixRateMarginFeeRequested",
                "getFixRateMarginFeeSucceed",
                "getFixRateMarginFeeFailed",
                "hideGetFixRateMarginFeeError",
                "resetMarginFee",
                "getFixRateCancelFeeRequested",
                "getFixRateCancelFeeSucceed",
                "getFixRateCancelFeeFailed",
                "hideGetFixRateCancelFeeError",
                "resetFixRateCancelFee",
                "getContractDeadlineRequested",
                "getContractDeadlineSucceed",
                "getContractDeadlineFailed",
                "hideGetContractDeadlineError",
                "resetGetContractDeadline",
                "setFixRateQueryType",
                "validFixRateOrderDateRequested",
                "validFixRateOrderDateSucceed",
                "validFixRateOrderDateFailed",
                "hideValidFixRateOrderDateError",
                "resetValidFixRateOrderDate"
              ]
            },
            {
              "isNamespace": false,
              "localName": "setFixRateQueryType",
              "importedName": "setFixRateQueryType",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 357,
                  "column": 55,
                  "index": 10403
                },
                "end": {
                  "line": 571,
                  "column": 1,
                  "index": 17092
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "setFixRateQueryType": "setFixRateQueryType"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/FixRate/ContractDetail/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts",
              "exportNames": [
                "getFixRateListRequested",
                "getFixRateListSucceed",
                "getFixRateListFailed",
                "hideGetFixRateListError",
                "fixRateTradeRequested",
                "fixRateTradeSucceed",
                "fixRateTradeFailed",
                "hideFixRateTradeError",
                "fixRateTradeModal",
                "resetFixRateTrade",
                "resetTrade",
                "getContractRateRequested",
                "getContractRateSucceed",
                "getContractRateFailed",
                "hideGetContractRateError",
                "updateFixRateCountDownSeconds",
                "stopFixRateCountDown",
                "resetFixRateCountDownSeconds",
                "resetRate",
                "getOneFixRateRequested",
                "getOneFixRateSucceed",
                "getOneFixRateFailed",
                "hideGetOneFixRateError",
                "setCancelItem",
                "resetCancelItem",
                "cancelOneFixRateContractRequested",
                "cancelOneFixRateContractSucceed",
                "cancelOneFixRateContractFailed",
                "hideCancelOneFixRateContractError",
                "cancelOneFixRateContractModal",
                "resetCancelOneFixRateContract",
                "getFixRateMarginFeeRequested",
                "getFixRateMarginFeeSucceed",
                "getFixRateMarginFeeFailed",
                "hideGetFixRateMarginFeeError",
                "resetMarginFee",
                "getFixRateCancelFeeRequested",
                "getFixRateCancelFeeSucceed",
                "getFixRateCancelFeeFailed",
                "hideGetFixRateCancelFeeError",
                "resetFixRateCancelFee",
                "getContractDeadlineRequested",
                "getContractDeadlineSucceed",
                "getContractDeadlineFailed",
                "hideGetContractDeadlineError",
                "resetGetContractDeadline",
                "setFixRateQueryType",
                "validFixRateOrderDateRequested",
                "validFixRateOrderDateSucceed",
                "validFixRateOrderDateFailed",
                "hideValidFixRateOrderDateError",
                "resetValidFixRateOrderDate"
              ]
            },
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 139,
                  "column": 54,
                  "index": 2799
                },
                "end": {
                  "line": 358,
                  "column": 1,
                  "index": 11000
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Order/OrderDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsParamName": "restActions",
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "previewActions",
              "sourceValue": "actions/preview",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/preview.ts",
              "exportNames": [
                "preview",
                "previewLoading",
                "removePreview",
                "resetAllPreview"
              ]
            },
            {
              "isNamespace": true,
              "localName": "collectionActions",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts",
              "exportNames": [
                "collectionListRequested",
                "collectionListSucceed",
                "collectionListFailed",
                "hideCollectionListError",
                "addCollectionRequested",
                "addCollectionSucceed",
                "addCollectionFailed",
                "resetAddCollection",
                "hideAddCollectionError",
                "reAddCollectionRequested",
                "oneCollectionRequested",
                "oneCollectionSucceed",
                "oneCollectionFailed",
                "hideOneCollectionError",
                "allServerProviderRequested",
                "allServerProviderSucceed",
                "allServerProviderFailed",
                "hideAllServerProviderError",
                "changeVaStatusRequested",
                "changeVaStatusSucceed",
                "changeVaStatusFailed",
                "toggleSleepModal",
                "depositLimitRequested",
                "depositLimitSucceed",
                "depositLimitFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [],
          "unknownElements": [],
          "spreadElementNames": ["restActions", "previewActions", "collectionActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Order/OrderDraft/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsParamName": "restActions",
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "previewActions",
              "sourceValue": "actions/preview",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/preview.ts",
              "exportNames": [
                "preview",
                "previewLoading",
                "removePreview",
                "resetAllPreview"
              ]
            },
            {
              "isNamespace": true,
              "localName": "collectionActions",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts",
              "exportNames": [
                "collectionListRequested",
                "collectionListSucceed",
                "collectionListFailed",
                "hideCollectionListError",
                "addCollectionRequested",
                "addCollectionSucceed",
                "addCollectionFailed",
                "resetAddCollection",
                "hideAddCollectionError",
                "reAddCollectionRequested",
                "oneCollectionRequested",
                "oneCollectionSucceed",
                "oneCollectionFailed",
                "hideOneCollectionError",
                "allServerProviderRequested",
                "allServerProviderSucceed",
                "allServerProviderFailed",
                "hideAllServerProviderError",
                "changeVaStatusRequested",
                "changeVaStatusSucceed",
                "changeVaStatusFailed",
                "toggleSleepModal",
                "depositLimitRequested",
                "depositLimitSucceed",
                "depositLimitFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [],
          "unknownElements": [],
          "spreadElementNames": ["restActions", "previewActions", "collectionActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 93,
                  "column": 55,
                  "index": 2309
                },
                "end": {
                  "line": 134,
                  "column": 1,
                  "index": 3688
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawChoose/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "protocolActions",
              "sourceValue": "actions/protocol",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/protocol.ts",
              "exportNames": [
                "checkAgreedRequested",
                "checkAgreedSucceed",
                "checkAgreedFailed",
                "sendAgreementRequested",
                "sendAgreementSucceed",
                "sendAgreementFailed",
                "getProtocolContentRequested",
                "getProtocolContentSucceed",
                "getProtocolContentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 215,
                  "column": 39,
                  "index": 7086
                },
                "end": {
                  "line": 866,
                  "column": 1,
                  "index": 27716
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "withdrawalsActions",
            "fundActions",
            "submitActions",
            "metaActions",
            "modalActions",
            "protocolActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawFXApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": true,
              "localName": "ticketActions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 70,
                  "column": 55,
                  "index": 2025
                },
                "end": {
                  "line": 125,
                  "column": 1,
                  "index": 3709
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "fundActions",
            "ticketActions",
            "metaActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawFXReApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 57,
                  "index": 946
                },
                "end": {
                  "line": 75,
                  "column": 1,
                  "index": 2269
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawFXAddMaterial/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 72,
                  "column": 71,
                  "index": 2458
                },
                "end": {
                  "line": 375,
                  "column": 1,
                  "index": 13209
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions", "metaActions", "modalActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawTransferAddMaterial/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 37,
                  "column": 67,
                  "index": 900
                },
                "end": {
                  "line": 80,
                  "column": 1,
                  "index": 2424
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["fileActions", "withdrawActions"],
          "objectPropertyMap": {
            "reset": "reset"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawNormalApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": true,
              "localName": "ticketActions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 77,
                  "column": 59,
                  "index": 2535
                },
                "end": {
                  "line": 203,
                  "column": 1,
                  "index": 6359
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "fundActions",
            "ticketActions",
            "utilActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "reset": "reset",
            "push": "push",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/TransferApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 74,
                  "column": 53,
                  "index": 2486
                },
                "end": {
                  "line": 187,
                  "column": 1,
                  "index": 5876
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "fundActions",
            "userActions",
            "utilActions"
          ],
          "objectPropertyMap": {
            "reset": "reset",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawRecord/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 54,
                  "index": 966
                },
                "end": {
                  "line": 99,
                  "column": 1,
                  "index": 3754
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "reset": "reset"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawDetail/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 245,
                  "column": 54,
                  "index": 7278
                },
                "end": {
                  "line": 1139,
                  "column": 1,
                  "index": 42203
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "userActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Statement/StatementAll/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 614,
                  "column": 52,
                  "index": 21232
                },
                "end": {
                  "line": 744,
                  "column": 1,
                  "index": 24686
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Statement/StatementPerMonth/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 138,
                  "column": 57,
                  "index": 3532
                },
                "end": {
                  "line": 216,
                  "column": 1,
                  "index": 5404
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Statement/StatementDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 46,
                  "column": 57,
                  "index": 1316
                },
                "end": {
                  "line": 104,
                  "column": 1,
                  "index": 2777
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Statement/PaymentBill/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meAction",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 61,
                  "column": 61,
                  "index": 1796
                },
                "end": {
                  "line": 288,
                  "column": 1,
                  "index": 9652
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["meAction"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "refundActions",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meAction",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 61,
                  "column": 61,
                  "index": 1796
                },
                "end": {
                  "line": 288,
                  "column": 1,
                  "index": 9652
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions", "refundActions", "meAction"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Statement/PaymentDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meAction",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 68,
                  "column": 63,
                  "index": 1972
                },
                "end": {
                  "line": 236,
                  "column": 1,
                  "index": 7911
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["meAction"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "refundActions",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "errorActions",
              "sourceValue": "actions/error",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/error.ts",
              "exportNames": ["specificSpotError"]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 68,
                  "column": 63,
                  "index": 1972
                },
                "end": {
                  "line": 236,
                  "column": 1,
                  "index": 7911
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions", "refundActions", "errorActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Ticket/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 35,
                  "column": 56,
                  "index": 1085
                },
                "end": {
                  "line": 212,
                  "column": 1,
                  "index": 7511
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Asset/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 45,
                  "column": 55,
                  "index": 1206
                },
                "end": {
                  "line": 119,
                  "column": 1,
                  "index": 3620
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 45,
                  "column": 55,
                  "index": 1206
                },
                "end": {
                  "line": 119,
                  "column": 1,
                  "index": 3620
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/TransferredAsset/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 70,
                  "column": 97,
                  "index": 1750
                },
                "end": {
                  "line": 109,
                  "column": 1,
                  "index": 3035
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/AddedServices/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withDrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 82,
                  "column": 62,
                  "index": 2096
                },
                "end": {
                  "line": 82,
                  "column": 67,
                  "index": 2101
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "withDrawActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/AddedServices/Apply/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withDrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 198,
                  "column": 62,
                  "index": 5712
                },
                "end": {
                  "line": 198,
                  "column": 67,
                  "index": 5717
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "withDrawActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Action/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 125,
                  "column": 62,
                  "index": 3316
                },
                "end": {
                  "line": 125,
                  "column": 67,
                  "index": 3321
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push",
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 17,
                  "column": 48,
                  "index": 423
                },
                "end": {
                  "line": 22,
                  "column": 1,
                  "index": 544
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/AccountComplete/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #316 composeArguments.length !== 1 (start line: 557, start column: 26, end line: 576",
            ", end column: 1)"
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions"],
          "objectPropertyMap": {
            "change": "change",
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/PartnerPlan/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/partner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/partner.ts",
              "exportNames": [
                "bindInviteCodeRequested",
                "bindInviteCodeSucceed",
                "bindInviteCodeFailed",
                "hideBindInviteCodeError",
                "initInviteCodeRequested",
                "initInviteCodeSucceed",
                "initInviteCodeFailed",
                "hideInitInviteCodeError",
                "togglePartnerEditable",
                "authorizeRequested",
                "authorizeSucceed",
                "authorizeFailed",
                "authorizeRefresh",
                "applyReportRequest",
                "applyReportSucceed",
                "applyReportFailed",
                "downloadReportRequest",
                "downloadReportSucceed",
                "downloadReportFailed",
                "getPartnerInfoRequested",
                "getPartnerInfoSucceed",
                "getPartnerInfoFailed",
                "loadReportMoreRequested",
                "changeTag",
                "loadReportMoreSucceed",
                "loadReportMoreFailed",
                "toggleShowAuditReason",
                "getOtherPartnerInfoRequested",
                "getOtherPartnerInfoSucceed",
                "getOtherPartnerInfoFailed",
                "loadOtherReportMoreRequested",
                "changeOtherReportTag",
                "loadOtherReportMoreSucceed",
                "loadOtherReportMoreFailed",
                "toggleOtherShowAuditReason",
                "updateOtherPartnerStatus",
                "updateOtherPartnerPermission",
                "submitPartnerRequested",
                "submitPartnerSucceed",
                "submitPartnerFailed",
                "updateBankCardValidationStatus",
                "submitPartnerSubAccountRequested",
                "submitPartnerSubAccountSucceed",
                "submitPartnerSubAccountFailed",
                "disablePartnerSubAccountRequested",
                "disablePartnerSubAccountSucceed",
                "disablePartnerSubAccountFailed",
                "permitPartnerSubAccountRequested",
                "permitPartnerSubAccountSucceed",
                "permitPartnerSubAccountFailed",
                "limitPartnerSubAccountRequested",
                "limitPartnerSubAccountSucceed",
                "limitPartnerSubAccountFailed",
                "partnerBindRequested",
                "partnerBindSucceed",
                "partnerBindFailed",
                "partnerBindInit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "couponActions",
              "sourceValue": "actions/coupon",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/coupon.ts",
              "exportNames": [
                "couponQueryRequested",
                "couponQuerySucceed",
                "couponQueryFailed",
                "couponQueryError"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 65,
                  "column": 51,
                  "index": 2383
                },
                "end": {
                  "line": 242,
                  "column": 1,
                  "index": 8383
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "couponActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/BasicSet/FirmProtocol/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/basicSet",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/basicSet.ts",
              "exportNames": [
                "createOrUpdateFirmInfoRequested",
                "createOrUpdateFirmInfoSucceed",
                "createOrUpdateFirmInfoFailed",
                "hideCreateOrUpdateFirmInfoError",
                "resetCreateOrUpdateFirmStepInfo",
                "setNextButtonLoading",
                "setFirmVerificationStep",
                "setFirmVerificationDifferCellsFlag",
                "clearFirmVerificationDifferCellsFlag",
                "toggleOtherArea",
                "updateTargetFirmItem",
                "saveUpdateData"
              ]
            },
            {
              "isNamespace": true,
              "localName": "firmActions",
              "sourceValue": "actions/firm",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/firm.ts",
              "exportNames": [
                "fetchFirmRequested",
                "fetchFirmSucceed",
                "fetchFirmFailed",
                "hideFetchFirmError",
                "resetFirmVerifyInfo",
                "firmRegistedIdExistRequested",
                "firmRegistedIdExistSucceed",
                "firmRegistedIdExistFailed",
                "hideFirmRegistedIdExistError",
                "resetFirmRegistedIdExist",
                "toggleFirmVerifyInitLoading",
                "toggleFirmVerifyTip",
                "checkEngNameExistRequested",
                "checkEngNameExistSucceed",
                "checkEngNameExistFailed",
                "hideCheckEngNameExistError",
                "resetCheckEngNameExist",
                "presetCountriesRequested",
                "presetCountriesSucceed",
                "presetCountriesFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 49,
                  "column": 58,
                  "index": 1379
                },
                "end": {
                  "line": 180,
                  "column": 1,
                  "index": 5148
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "firmActions"],
          "objectPropertyMap": {
            "push": "push",
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/OperationRecords/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 46,
                  "column": 54,
                  "index": 1445
                },
                "end": {
                  "line": 121,
                  "column": 1,
                  "index": 3655
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "reset": "reset"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Collection/CollectionDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts",
              "exportNames": [
                "collectionListRequested",
                "collectionListSucceed",
                "collectionListFailed",
                "hideCollectionListError",
                "addCollectionRequested",
                "addCollectionSucceed",
                "addCollectionFailed",
                "resetAddCollection",
                "hideAddCollectionError",
                "reAddCollectionRequested",
                "oneCollectionRequested",
                "oneCollectionSucceed",
                "oneCollectionFailed",
                "hideOneCollectionError",
                "allServerProviderRequested",
                "allServerProviderSucceed",
                "allServerProviderFailed",
                "hideAllServerProviderError",
                "changeVaStatusRequested",
                "changeVaStatusSucceed",
                "changeVaStatusFailed",
                "toggleSleepModal",
                "depositLimitRequested",
                "depositLimitSucceed",
                "depositLimitFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #230 lastArguments.length !== 1 (start line: 213, start column: 18, end line: 213",
            ", end column: 62)"
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "modalActions"],
          "objectPropertyMap": {
            "change": "change",
            "touch": "touch"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalChoose/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 111,
                  "column": 56,
                  "index": 3652
                },
                "end": {
                  "line": 585,
                  "column": 1,
                  "index": 17781
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "withdrawActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalFX/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 57,
                  "column": 52,
                  "index": 1686
                },
                "end": {
                  "line": 71,
                  "column": 1,
                  "index": 2127
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "fileActions"],
          "objectPropertyMap": {
            "reset": "reset"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalNormalAdd/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 105,
                  "column": 72,
                  "index": 3200
                },
                "end": {
                  "line": 258,
                  "column": 1,
                  "index": 8087
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "fileActions",
            "withdrawActions",
            "metaActions",
            "submitActions"
          ],
          "objectPropertyMap": {
            "initialize": "initialize",
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalTransferAdd/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 220,
                  "column": 71,
                  "index": 6603
                },
                "end": {
                  "line": 399,
                  "column": 1,
                  "index": 12253
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "fileActions",
            "withdrawActions",
            "userActions",
            "submitActions",
            "metaActions"
          ],
          "objectPropertyMap": {
            "destroy": "destroy",
            "initialize": "initialize",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalDetail/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "previewActions",
              "sourceValue": "actions/preview",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/preview.ts",
              "exportNames": [
                "preview",
                "previewLoading",
                "removePreview",
                "resetAllPreview"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 251,
                  "column": 56,
                  "index": 6169
                },
                "end": {
                  "line": 1277,
                  "column": 1,
                  "index": 38462
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "fileActions",
            "previewActions",
            "utilActions",
            "fundActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/InternalMessage/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "messageActions",
              "sourceValue": "actions/message",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/message.ts",
              "exportNames": [
                "preQuery",
                "queryData",
                "querySucceed",
                "queryFailed",
                "queryUnread",
                "queryUnreadSucceed",
                "queryUnreadFailed",
                "markLocalAllReaded",
                "markServerAllReaded",
                "markAllReadedSucceed",
                "markAllReadedFailed",
                "markLocalSingleReaded",
                "markServerSingleReaded",
                "markServerSingleReadedSucceed",
                "markServerSingleReadedFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 47,
                  "column": 59,
                  "index": 1182
                },
                "end": {
                  "line": 93,
                  "column": 1,
                  "index": 2303
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["messageActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Swap/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 51,
                  "column": 44,
                  "index": 1169
                },
                "end": {
                  "line": 71,
                  "column": 1,
                  "index": 1650
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Swap/SwapRecords/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 43,
                  "column": 51,
                  "index": 1177
                },
                "end": {
                  "line": 139,
                  "column": 1,
                  "index": 3864
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Swap/SwapExchange/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 141,
                  "column": 52,
                  "index": 4472
                },
                "end": {
                  "line": 231,
                  "column": 1,
                  "index": 7736
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "meActions"],
          "objectPropertyMap": {
            "destroy": "destroy",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Swap/SwapDetail/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 104,
                  "column": 50,
                  "index": 2411
                },
                "end": {
                  "line": 375,
                  "column": 1,
                  "index": 12886
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerInviter/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 20,
                  "column": 55,
                  "index": 484
                },
                "end": {
                  "line": 45,
                  "column": 1,
                  "index": 1172
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerInviter/XTPartnerInviterSign/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xtPartnerActions",
              "sourceValue": "actions/xtPartner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xtPartner.ts",
              "exportNames": [
                "contractApplyRequested",
                "contractApplySucceed",
                "contractApplyFailed",
                "initContractApply",
                "searchXTPartnerRequested",
                "searchXTPartnerSucceed",
                "searchXTPartnerFailed",
                "initSearchXTPartner",
                "queryPartnerRequested",
                "queryPartnerSucceed",
                "queryPartnerFailed",
                "rescindContractRequested",
                "rescindContractSucceed",
                "rescindContractFailed",
                "initRescindContract",
                "querySigningRequested",
                "querySigningSucceed",
                "querySigningFailed",
                "agreeContractRequested",
                "agreeContractSucceed",
                "agreeContractFailed",
                "initAgreeContract",
                "rejectContractRequested",
                "rejectContractSucceed",
                "rejectContractFailed",
                "initRejectContract",
                "cancelContractRequested",
                "cancelContractSucceed",
                "cancelContractFailed",
                "initCancelContract",
                "setContractId",
                "upgradeXTPartnerRequested",
                "upgradeXTPartnerSucceed",
                "upgradeXTPartnerFailed",
                "initUpgradeXTPartner"
              ]
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 55,
                  "column": 75,
                  "index": 1653
                },
                "end": {
                  "line": 174,
                  "column": 1,
                  "index": 5067
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xtPartnerActions"],
          "objectPropertyMap": {
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerInviter/XTPartnerInviterList/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xtPartnerActions",
              "sourceValue": "actions/xtPartner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xtPartner.ts",
              "exportNames": [
                "contractApplyRequested",
                "contractApplySucceed",
                "contractApplyFailed",
                "initContractApply",
                "searchXTPartnerRequested",
                "searchXTPartnerSucceed",
                "searchXTPartnerFailed",
                "initSearchXTPartner",
                "queryPartnerRequested",
                "queryPartnerSucceed",
                "queryPartnerFailed",
                "rescindContractRequested",
                "rescindContractSucceed",
                "rescindContractFailed",
                "initRescindContract",
                "querySigningRequested",
                "querySigningSucceed",
                "querySigningFailed",
                "agreeContractRequested",
                "agreeContractSucceed",
                "agreeContractFailed",
                "initAgreeContract",
                "rejectContractRequested",
                "rejectContractSucceed",
                "rejectContractFailed",
                "initRejectContract",
                "cancelContractRequested",
                "cancelContractSucceed",
                "cancelContractFailed",
                "initCancelContract",
                "setContractId",
                "upgradeXTPartnerRequested",
                "upgradeXTPartnerSucceed",
                "upgradeXTPartnerFailed",
                "initUpgradeXTPartner"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 33,
                  "column": 60,
                  "index": 1030
                },
                "end": {
                  "line": 143,
                  "column": 1,
                  "index": 4921
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xtPartnerActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerTransfer/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xtPartnerActions",
              "sourceValue": "actions/xtPartner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xtPartner.ts",
              "exportNames": [
                "contractApplyRequested",
                "contractApplySucceed",
                "contractApplyFailed",
                "initContractApply",
                "searchXTPartnerRequested",
                "searchXTPartnerSucceed",
                "searchXTPartnerFailed",
                "initSearchXTPartner",
                "queryPartnerRequested",
                "queryPartnerSucceed",
                "queryPartnerFailed",
                "rescindContractRequested",
                "rescindContractSucceed",
                "rescindContractFailed",
                "initRescindContract",
                "querySigningRequested",
                "querySigningSucceed",
                "querySigningFailed",
                "agreeContractRequested",
                "agreeContractSucceed",
                "agreeContractFailed",
                "initAgreeContract",
                "rejectContractRequested",
                "rejectContractSucceed",
                "rejectContractFailed",
                "initRejectContract",
                "cancelContractRequested",
                "cancelContractSucceed",
                "cancelContractFailed",
                "initCancelContract",
                "setContractId",
                "upgradeXTPartnerRequested",
                "upgradeXTPartnerSucceed",
                "upgradeXTPartnerFailed",
                "initUpgradeXTPartner"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xpTransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 32,
                  "column": 57,
                  "index": 838
                },
                "end": {
                  "line": 54,
                  "column": 1,
                  "index": 1740
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xtPartnerActions", "xpTransferActions"],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerTransfer/XTPartnerTransferApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xptransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xtPartnerActions",
              "sourceValue": "actions/xtPartner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xtPartner.ts",
              "exportNames": [
                "contractApplyRequested",
                "contractApplySucceed",
                "contractApplyFailed",
                "initContractApply",
                "searchXTPartnerRequested",
                "searchXTPartnerSucceed",
                "searchXTPartnerFailed",
                "initSearchXTPartner",
                "queryPartnerRequested",
                "queryPartnerSucceed",
                "queryPartnerFailed",
                "rescindContractRequested",
                "rescindContractSucceed",
                "rescindContractFailed",
                "initRescindContract",
                "querySigningRequested",
                "querySigningSucceed",
                "querySigningFailed",
                "agreeContractRequested",
                "agreeContractSucceed",
                "agreeContractFailed",
                "initAgreeContract",
                "rejectContractRequested",
                "rejectContractSucceed",
                "rejectContractFailed",
                "initRejectContract",
                "cancelContractRequested",
                "cancelContractSucceed",
                "cancelContractFailed",
                "initCancelContract",
                "setContractId",
                "upgradeXTPartnerRequested",
                "upgradeXTPartnerSucceed",
                "upgradeXTPartnerFailed",
                "initUpgradeXTPartner"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 76,
                  "column": 62,
                  "index": 2510
                },
                "end": {
                  "line": 233,
                  "column": 1,
                  "index": 7161
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "meActions",
            "userActions",
            "xptransferActions",
            "xtPartnerActions",
            "fundActions"
          ],
          "objectPropertyMap": {
            "change": "change",
            "destroy": "destroy",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerTransfer/XTPartnerTransferList/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xpTransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 42,
                  "column": 63,
                  "index": 1593
                },
                "end": {
                  "line": 210,
                  "column": 1,
                  "index": 7233
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xpTransferActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerTransfer/XTPartnerTransferDetail/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xpTransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 30,
                  "column": 63,
                  "index": 823
                },
                "end": {
                  "line": 116,
                  "column": 1,
                  "index": 3010
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xpTransferActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerInvitee/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 23,
                  "column": 56,
                  "index": 615
                },
                "end": {
                  "line": 35,
                  "column": 1,
                  "index": 923
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerInvitee/XTPartnerInviteeList/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xtPartnerActions",
              "sourceValue": "actions/xtPartner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xtPartner.ts",
              "exportNames": [
                "contractApplyRequested",
                "contractApplySucceed",
                "contractApplyFailed",
                "initContractApply",
                "searchXTPartnerRequested",
                "searchXTPartnerSucceed",
                "searchXTPartnerFailed",
                "initSearchXTPartner",
                "queryPartnerRequested",
                "queryPartnerSucceed",
                "queryPartnerFailed",
                "rescindContractRequested",
                "rescindContractSucceed",
                "rescindContractFailed",
                "initRescindContract",
                "querySigningRequested",
                "querySigningSucceed",
                "querySigningFailed",
                "agreeContractRequested",
                "agreeContractSucceed",
                "agreeContractFailed",
                "initAgreeContract",
                "rejectContractRequested",
                "rejectContractSucceed",
                "rejectContractFailed",
                "initRejectContract",
                "cancelContractRequested",
                "cancelContractSucceed",
                "cancelContractFailed",
                "initCancelContract",
                "setContractId",
                "upgradeXTPartnerRequested",
                "upgradeXTPartnerSucceed",
                "upgradeXTPartnerFailed",
                "initUpgradeXTPartner"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 42,
                  "column": 60,
                  "index": 1516
                },
                "end": {
                  "line": 256,
                  "column": 1,
                  "index": 8724
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xtPartnerActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerReceive/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xpTransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 31,
                  "column": 56,
                  "index": 759
                },
                "end": {
                  "line": 50,
                  "column": 1,
                  "index": 1487
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xpTransferActions"],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerReceive/XTPartnerReceiveList/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xpReceiveActions",
              "sourceValue": "actions/xpReceive",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpReceive.ts",
              "exportNames": [
                "queryReceiveRequested",
                "queryReceiveSucceed",
                "queryReceiveFailed",
                "setReceiveQueryData",
                "addRemarkRequested",
                "addRemarkSucceed",
                "addRemarkFailed",
                "initAddRemark",
                "exportRecordRequested",
                "exportRecordSucceed",
                "exportRecordFailed",
                "initExportRecord",
                "receiveDetailRequested",
                "receiveDetailSucceed",
                "receiveDetailFailed",
                "refundXTApplyRequested",
                "refundXTApplySucceed",
                "refundXTApplyFailed",
                "initRefundXTApply",
                "setXPRefundStep",
                "setReceiveModal"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 51,
                  "column": 60,
                  "index": 1606
                },
                "end": {
                  "line": 231,
                  "column": 1,
                  "index": 8024
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xpReceiveActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerReceive/XTPartnerReceiveDetail/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xpReceiveActions",
              "sourceValue": "actions/xpReceive",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpReceive.ts",
              "exportNames": [
                "queryReceiveRequested",
                "queryReceiveSucceed",
                "queryReceiveFailed",
                "setReceiveQueryData",
                "addRemarkRequested",
                "addRemarkSucceed",
                "addRemarkFailed",
                "initAddRemark",
                "exportRecordRequested",
                "exportRecordSucceed",
                "exportRecordFailed",
                "initExportRecord",
                "receiveDetailRequested",
                "receiveDetailSucceed",
                "receiveDetailFailed",
                "refundXTApplyRequested",
                "refundXTApplySucceed",
                "refundXTApplyFailed",
                "initRefundXTApply",
                "setXPRefundStep",
                "setReceiveModal"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 37,
                  "column": 62,
                  "index": 1162
                },
                "end": {
                  "line": 199,
                  "column": 1,
                  "index": 5652
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xpReceiveActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerRefund/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 23,
                  "column": 55,
                  "index": 614
                },
                "end": {
                  "line": 35,
                  "column": 1,
                  "index": 922
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerRefund/XTPartnerRefundApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "xpReceiveActions",
              "sourceValue": "actions/xpReceive",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpReceive.ts",
              "exportNames": [
                "queryReceiveRequested",
                "queryReceiveSucceed",
                "queryReceiveFailed",
                "setReceiveQueryData",
                "addRemarkRequested",
                "addRemarkSucceed",
                "addRemarkFailed",
                "initAddRemark",
                "exportRecordRequested",
                "exportRecordSucceed",
                "exportRecordFailed",
                "initExportRecord",
                "receiveDetailRequested",
                "receiveDetailSucceed",
                "receiveDetailFailed",
                "refundXTApplyRequested",
                "refundXTApplySucceed",
                "refundXTApplyFailed",
                "initRefundXTApply",
                "setXPRefundStep",
                "setReceiveModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 52,
                  "column": 60,
                  "index": 1717
                },
                "end": {
                  "line": 181,
                  "column": 1,
                  "index": 5908
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["xpReceiveActions", "fundActions"],
          "objectPropertyMap": {
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerUpgrade/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/xtPartner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xtPartner.ts",
              "exportNames": [
                "contractApplyRequested",
                "contractApplySucceed",
                "contractApplyFailed",
                "initContractApply",
                "searchXTPartnerRequested",
                "searchXTPartnerSucceed",
                "searchXTPartnerFailed",
                "initSearchXTPartner",
                "queryPartnerRequested",
                "queryPartnerSucceed",
                "queryPartnerFailed",
                "rescindContractRequested",
                "rescindContractSucceed",
                "rescindContractFailed",
                "initRescindContract",
                "querySigningRequested",
                "querySigningSucceed",
                "querySigningFailed",
                "agreeContractRequested",
                "agreeContractSucceed",
                "agreeContractFailed",
                "initAgreeContract",
                "rejectContractRequested",
                "rejectContractSucceed",
                "rejectContractFailed",
                "initRejectContract",
                "cancelContractRequested",
                "cancelContractSucceed",
                "cancelContractFailed",
                "initCancelContract",
                "setContractId",
                "upgradeXTPartnerRequested",
                "upgradeXTPartnerSucceed",
                "upgradeXTPartnerFailed",
                "initUpgradeXTPartner"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 34,
                  "column": 56,
                  "index": 1007
                },
                "end": {
                  "line": 140,
                  "column": 1,
                  "index": 4071
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 28,
                  "column": 57,
                  "index": 841
                },
                "end": {
                  "line": 39,
                  "column": 1,
                  "index": 1134
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/SuperMember/SuperMemberUsingNew/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "modalActions",
              "importedName": "modalActions",
              "sourceValue": "actions",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/index.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "SuperMemberUsingNew",
              "loc": {
                "start": {
                  "line": 481,
                  "column": 2,
                  "index": 14003
                },
                "end": {
                  "line": 481,
                  "column": 21,
                  "index": 14022
                },
                "identifierName": "SuperMemberUsingNew"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/CustomerPlan/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 49,
                  "column": 62,
                  "index": 1499
                },
                "end": {
                  "line": 122,
                  "column": 1,
                  "index": 3491
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/CustomerPlan/CustomerPlanBuyPage/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 118,
                  "column": 69,
                  "index": 4487
                },
                "end": {
                  "line": 945,
                  "column": 1,
                  "index": 31896
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions", "submitActions", "metaActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/CustomerPlan/CustomerPlanDeduction/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 43,
                  "column": 71,
                  "index": 1435
                },
                "end": {
                  "line": 147,
                  "column": 1,
                  "index": 4649
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions", "submitActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/CustomerPlan/CustomerPlanDetails/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 55,
                  "column": 69,
                  "index": 1509
                },
                "end": {
                  "line": 277,
                  "column": 1,
                  "index": 7386
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/CustomerPlan/CustomerPlanHistory/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 35,
                  "column": 71,
                  "index": 1108
                },
                "end": {
                  "line": 117,
                  "column": 1,
                  "index": 3275
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #367 actionsComponents not found (start line: 189, start column: 0, end line: 200",
            ", end column: 1)"
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/component/GrantFxWithdrawVerifiedFailed/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "GrantFxWithdrawVerifiedFailed",
              "loc": {
                "start": {
                  "line": 63,
                  "column": 7,
                  "index": 1728
                },
                "end": {
                  "line": 63,
                  "column": 36,
                  "index": 1757
                },
                "identifierName": "GrantFxWithdrawVerifiedFailed"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/OrderExchangeScene/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "exchangeStaffListRequest",
              "importedName": "exchangeStaffListRequest",
              "sourceValue": "actions/exchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/exchange.ts"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #230 lastArguments.length !== 1 (start line: 88, start column: 18, end line: 88",
            ", end column: 62)"
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "exchangeStaffListRequest": "exchangeStaffListRequest",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/OrderSceneDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "OrderSceneDetail",
              "loc": {
                "start": {
                  "line": 287,
                  "column": 2,
                  "index": 8186
                },
                "end": {
                  "line": 287,
                  "column": 18,
                  "index": 8202
                },
                "identifierName": "OrderSceneDetail"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalEasyAdd/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "WithdrawalEasyAddFrom",
              "loc": {
                "start": {
                  "line": 135,
                  "column": 63,
                  "index": 3981
                },
                "end": {
                  "line": 135,
                  "column": 84,
                  "index": 4002
                },
                "identifierName": "WithdrawalEasyAddFrom"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawalsActions", "securityActions", "userActions"],
          "objectPropertyMap": {
            "reset": "reset",
            "touch": "touch",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawEasyFXApply/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": true,
              "localName": "ticketActions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 70,
                  "column": 59,
                  "index": 1998
                },
                "end": {
                  "line": 113,
                  "column": 1,
                  "index": 3286
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "fundActions",
            "ticketActions",
            "metaActions"
          ],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawApplyForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "ticketActions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xptransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 106,
                  "column": 52,
                  "index": 4016
                },
                "end": {
                  "line": 899,
                  "column": 1,
                  "index": 32155
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "ticketActions",
            "utilActions",
            "xptransferActions",
            "metaActions",
            "submitActions"
          ],
          "objectPropertyMap": {
            "initialize": "initialize",
            "push": "push",
            "change": "change",
            "touch": "touch",
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/ABVPanel/XTCaptcha/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 64,
                  "column": 65,
                  "index": 1928
                },
                "end": {
                  "line": 165,
                  "column": 1,
                  "index": 4634
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["userActions", "securityActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/ABVPanel/NCCaptcha/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 38,
                  "column": 65,
                  "index": 1176
                },
                "end": {
                  "line": 121,
                  "column": 1,
                  "index": 3674
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["userActions", "securityActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/frontBaseForm.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 460,
                  "column": 44,
                  "index": 10918
                },
                "end": {
                  "line": 585,
                  "column": 1,
                  "index": 15598
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["fileActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/AddBindPhoneForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "bindActions",
              "sourceValue": "actions/bind",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/bind.ts",
              "exportNames": [
                "bindRequested",
                "bindSucceed",
                "bindFailed",
                "modifyBindRequested",
                "modifyBindSucceed",
                "modifyBindFailed",
                "setBindStep",
                "resetBindStep",
                "hideBindError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 89,
                  "column": 56,
                  "index": 2642
                },
                "end": {
                  "line": 224,
                  "column": 1,
                  "index": 7332
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "bindActions",
            "vcodeActions",
            "securityActions",
            "submitActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/SetPasswordForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "passwordActions",
              "sourceValue": "actions/password",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/password.ts",
              "exportNames": [
                "modifyTradePasswordRequested",
                "modifyTradePasswordSucceed",
                "modifyTradePasswordFailed",
                "initModifyTradePassword",
                "forgotTradePasswordRequested",
                "forgotTradePasswordSucceed",
                "forgotTradePasswordFailed",
                "initForgotTradePassword",
                "setTradePasswordRequested",
                "setTradePasswordSucceed",
                "setTradePasswordFailed",
                "initSetTradePassword",
                "modifyLoginPasswordRequested",
                "modifyLoginPasswordSucceed",
                "modifyLoginPasswordFailed",
                "setModifyLoginPasswordStep",
                "resetModifyLoginPassword",
                "hideModifyLoginPasswordError",
                "initLoginPasswordRequested",
                "initLoginPasswordSucceed",
                "initLoginPasswordFailed",
                "initInitLoginPassword"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "SetPasswordForm",
              "loc": {
                "start": {
                  "line": 164,
                  "column": 4,
                  "index": 4907
                },
                "end": {
                  "line": 164,
                  "column": 19,
                  "index": 4922
                },
                "identifierName": "SetPasswordForm"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["userActions", "passwordActions"],
          "objectPropertyMap": {
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/CreateOrderForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "createOrderRequested",
              "importedName": "createOrderRequested",
              "sourceValue": "actions/order",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/order.ts"
            },
            {
              "isNamespace": false,
              "localName": "updateOneOrderRequested",
              "importedName": "updateOneOrderRequested",
              "sourceValue": "actions/order",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/order.ts"
            },
            {
              "isNamespace": false,
              "localName": "switchCreateOrderSuccessModal",
              "importedName": "switchCreateOrderSuccessModal",
              "sourceValue": "actions/order",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/order.ts"
            },
            {
              "isNamespace": false,
              "localName": "createTips",
              "importedName": "createTips",
              "sourceValue": "actions/tip",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/tip.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "PlatformGuard",
              "loc": {
                "start": {
                  "line": 149,
                  "column": 1,
                  "index": 3818
                },
                "end": {
                  "line": 149,
                  "column": 14,
                  "index": 3831
                },
                "identifierName": "PlatformGuard"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "createOrderRequested": "createOrderRequested",
            "updateOneOrderRequested": "updateOneOrderRequested",
            "switchCreateOrderSuccessModal": "switchCreateOrderSuccessModal",
            "createTips": "createTips"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/NavPanel/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "faqActions",
              "sourceValue": "actions/faq",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/faq.ts",
              "exportNames": [
                "getFaqMenuRequested",
                "getFaqMenuSucceed",
                "getFaqMenuFailed",
                "getFaqHomeRequested",
                "getFaqHomeSucceed",
                "getFaqHomeFailed",
                "getFaqCategoryRequested",
                "getFaqCategorySucceed",
                "getFaqCategoryFailed",
                "getMoreFaqCategorySucceed",
                "getFaqSearchRequested",
                "getFaqSearchSucceed",
                "getFaqSearchFailed",
                "getMoreFaqSearchSucceed",
                "getFaqDetailRequested",
                "getFaqDetailSucceed",
                "getFaqDetailFailed",
                "clearFaqDetail",
                "postFeedbackRequested",
                "postFeedbackSucceed",
                "postFeedbackFailed",
                "getTagFaqRequested",
                "getTagFaqSucceed",
                "getTagFaqFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 54,
                  "column": 52,
                  "index": 1479
                },
                "end": {
                  "line": 177,
                  "column": 1,
                  "index": 4748
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions", "faqActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoan/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "OrderLoan",
              "loc": {
                "start": {
                  "line": 64,
                  "column": 2,
                  "index": 1776
                },
                "end": {
                  "line": 64,
                  "column": 11,
                  "index": 1785
                },
                "identifierName": "OrderLoan"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/MyLoans/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 56,
                  "column": 70,
                  "index": 1627
                },
                "end": {
                  "line": 165,
                  "column": 1,
                  "index": 4331
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LoanWithdraw/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 47,
                  "column": 85,
                  "index": 1394
                },
                "end": {
                  "line": 132,
                  "column": 1,
                  "index": 3362
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoanApplication/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "OrderLoanApplication",
              "loc": {
                "start": {
                  "line": 128,
                  "column": 2,
                  "index": 3497
                },
                "end": {
                  "line": 128,
                  "column": 22,
                  "index": 3517
                },
                "identifierName": "OrderLoanApplication"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "destroy": "destroy",
            "historyPush": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LoanDetail/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "clearMyLoanState",
              "importedName": "clearMyLoanState",
              "sourceValue": "enterpriseFinancing/actions/myLoans",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/actions/myLoans.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "LoanDetail",
              "loc": {
                "start": {
                  "line": 160,
                  "column": 2,
                  "index": 5349
                },
                "end": {
                  "line": 160,
                  "column": 12,
                  "index": 5359
                },
                "identifierName": "LoanDetail"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "clearMyLoanState": "clearMyLoanState"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/Repayment/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "getWhiteListRequested",
              "importedName": "getWhiteListRequested",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Repayment",
              "loc": {
                "start": {
                  "line": 143,
                  "column": 2,
                  "index": 4258
                },
                "end": {
                  "line": 143,
                  "column": 11,
                  "index": 4267
                },
                "identifierName": "Repayment"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "change": "change",
            "getWhiteListRequested": "getWhiteListRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LegalMobileModify/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "LegalMobileModify",
              "loc": {
                "start": {
                  "line": 82,
                  "column": 2,
                  "index": 1976
                },
                "end": {
                  "line": 82,
                  "column": 19,
                  "index": 1993
                },
                "identifierName": "LegalMobileModify"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Steps/FirstRegisterSteps/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 98,
                  "column": 54,
                  "index": 2152
                },
                "end": {
                  "line": 330,
                  "column": 1,
                  "index": 9623
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["meActions"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xshieldActions",
              "sourceValue": "actions/xshield",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xshield.ts",
              "exportNames": [
                "identityVerifyRequested",
                "identityVerifySucceed",
                "identityVerifyFailed",
                "xshieldBindRequested",
                "xshieldBindSucceed",
                "xshieldBindFailed",
                "xshieldUnBindRequested",
                "xshieldUnBindSucceed",
                "xshieldUnBindFailed",
                "mfaWechatAuthRequested",
                "mfaWechatAuthSucceed",
                "mfaWechatAuthFailed",
                "initMfaWechatAuth",
                "setXshieldBindStep",
                "setMFAVisible",
                "setMFAParam",
                "initXshield",
                "setMFATip",
                "unBindSubAccountRequested",
                "unBindSubAccountSucceed",
                "unBindSubAccountFailed",
                "unBindSubAccountModal"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 98,
                  "column": 54,
                  "index": 2152
                },
                "end": {
                  "line": 330,
                  "column": 1,
                  "index": 9623
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["meActions", "xshieldActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/SidebarNav/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "uiActions",
              "sourceValue": "actions/ui",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ui.ts",
              "exportNames": [
                "toggleMobileNavSidebar",
                "toggleSubAppLoading",
                "setSubAppError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "appActions",
              "sourceValue": "actions/app",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/app.ts",
              "exportNames": ["userCheckFuncs", "userConfirmNewFuncOrChange"]
            },
            {
              "isNamespace": true,
              "localName": "statusActions",
              "sourceValue": "actions/status",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/status.ts",
              "exportNames": ["toggleEntityStatus"]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "getWhiteListRequested",
              "importedName": "getWhiteListRequested",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 187,
                  "column": 66,
                  "index": 5302
                },
                "end": {
                  "line": 383,
                  "column": 1,
                  "index": 11438
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["uiActions", "appActions", "statusActions"],
          "objectPropertyMap": {
            "push": "push",
            "getWhiteListRequested": "getWhiteListRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/ProtocolUpdate/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "PackagedComponent",
              "loc": {
                "start": {
                  "line": 85,
                  "column": 53,
                  "index": 3140
                },
                "end": {
                  "line": 85,
                  "column": 70,
                  "index": 3157
                },
                "identifierName": "PackagedComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions", "modalActions", "submitActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Crm/SideFunctions/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 111,
                  "column": 60,
                  "index": 3404
                },
                "end": {
                  "line": 261,
                  "column": 1,
                  "index": 7931
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions", "userActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/MembershipNotify.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "modalActions",
              "importedName": "modalActions",
              "sourceValue": "actions",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/index.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "WrapperComponent",
              "loc": {
                "start": {
                  "line": 110,
                  "column": 3,
                  "index": 3716
                },
                "end": {
                  "line": 110,
                  "column": 19,
                  "index": 3732
                },
                "identifierName": "WrapperComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/SystemUpdate.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "WrapperComponent",
              "loc": {
                "start": {
                  "line": 61,
                  "column": 3,
                  "index": 1573
                },
                "end": {
                  "line": 61,
                  "column": 19,
                  "index": 1589
                },
                "identifierName": "WrapperComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/QueryRateChartForm/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "swapActions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 63,
                  "column": 58,
                  "index": 1521
                },
                "end": {
                  "line": 165,
                  "column": 1,
                  "index": 4802
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["swapActions"],
          "objectPropertyMap": {
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/BasicSet/AnnuallyCheck/StatusBar/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "tipActions",
              "sourceValue": "actions/tip",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/tip.ts",
              "exportNames": [
                "tipRequested",
                "tipSucceed",
                "tipFailed",
                "resetTip",
                "setCurrentTipIndex",
                "resetCurrentTipIndex",
                "setPanelState",
                "delTip",
                "delTipSucceed",
                "createTips",
                "closeTip",
                "closeTipSucceed",
                "toggleDeclareOrderTimeOutRangeTip"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 37,
                  "column": 76,
                  "index": 946
                },
                "end": {
                  "line": 104,
                  "column": 1,
                  "index": 2868
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["tipActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/Limit.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsParamName": "action",
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ModifyedComponent",
              "loc": {
                "start": {
                  "line": 53,
                  "column": 54,
                  "index": 1402
                },
                "end": {
                  "line": 53,
                  "column": 71,
                  "index": 1419
                },
                "identifierName": "ModifyedComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["action"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Account/Withdrawal/WithdrawalTable/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 81,
                  "column": 55,
                  "index": 1919
                },
                "end": {
                  "line": 219,
                  "column": 1,
                  "index": 6867
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/BindAcctUpperLimit.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaAction",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsAction",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "WrapperComponent",
              "loc": {
                "start": {
                  "line": 120,
                  "column": 3,
                  "index": 4037
                },
                "end": {
                  "line": 120,
                  "column": 19,
                  "index": 4053
                },
                "identifierName": "WrapperComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaAction", "withdrawalsAction"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/BenefitPkgInfo.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ModifyedComponent",
              "loc": {
                "start": {
                  "line": 66,
                  "column": 53,
                  "index": 1922
                },
                "end": {
                  "line": 66,
                  "column": 70,
                  "index": 1939
                },
                "identifierName": "ModifyedComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/AssignStaffForm/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/staff",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/staff.ts",
              "exportNames": [
                "staffSuffixRequested",
                "staffSuffixSucceed",
                "staffSuffixFailed",
                "toggleStaffSuffixModal",
                "hideStaffSuffixError",
                "modifyStaffSuffixRequested",
                "modifyStaffSuffixSucceed",
                "modifyStaffSuffixFailed",
                "toggleModifyStaffSuffixModal",
                "resetModifyStaffSuffix",
                "addStaffRequested",
                "addStaffSucceed",
                "addStaffFailed",
                "setAddStaffStep",
                "hideAddStaffError",
                "setAddStaffAccount",
                "resetAddStaff",
                "staffListRequested",
                "staffListSucceed",
                "staffListFailed",
                "setStaffListStatus",
                "resetStaffList",
                "oneStaffInfoRequested",
                "oneStaffInfoSucceed",
                "oneStaffInfoFailed",
                "updateOneStaffRequested",
                "updateOneStaffSucceed",
                "updateOneStaffFailed",
                "hideUpdateOneStaffError",
                "resetUpdateOneStaff",
                "delOneStaffRequested",
                "delOneStaffSucceed",
                "delOneStaffFailed",
                "hideDelOneStaffError",
                "toggleDelOneStaffModal",
                "resetStaffPwRequested",
                "resetStaffPwSucceed",
                "resetStaffPwFailed",
                "genResetStaffPassword",
                "toggleResetStaffPwModal",
                "resetResetStaffPw",
                "assignStaffDepositRequested",
                "assignStaffDepositSucceed",
                "assignStaffDepositFailed",
                "toggleAssignStaffDepositModal",
                "setDepositIdsWaitAssign",
                "addDepositIdsWaitAssign",
                "removeDepositIdsWaitAssign",
                "resetDepositIdsWaitAssign",
                "resetAssignStaffDeposit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 43,
                  "column": 61,
                  "index": 827
                },
                "end": {
                  "line": 95,
                  "column": 1,
                  "index": 1908
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/EarnListDownloadQueryForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "earnExchangeActions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 55,
                  "column": 65,
                  "index": 1555
                },
                "end": {
                  "line": 184,
                  "column": 1,
                  "index": 5818
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["earnExchangeActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/EarnListQueryForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "earnExchangeActions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "collectionActions",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts",
              "exportNames": [
                "collectionListRequested",
                "collectionListSucceed",
                "collectionListFailed",
                "hideCollectionListError",
                "addCollectionRequested",
                "addCollectionSucceed",
                "addCollectionFailed",
                "resetAddCollection",
                "hideAddCollectionError",
                "reAddCollectionRequested",
                "oneCollectionRequested",
                "oneCollectionSucceed",
                "oneCollectionFailed",
                "hideOneCollectionError",
                "allServerProviderRequested",
                "allServerProviderSucceed",
                "allServerProviderFailed",
                "hideAllServerProviderError",
                "changeVaStatusRequested",
                "changeVaStatusSucceed",
                "changeVaStatusFailed",
                "toggleSleepModal",
                "depositLimitRequested",
                "depositLimitSucceed",
                "depositLimitFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "tipActions",
              "sourceValue": "actions/tip",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/tip.ts",
              "exportNames": [
                "tipRequested",
                "tipSucceed",
                "tipFailed",
                "resetTip",
                "setCurrentTipIndex",
                "resetCurrentTipIndex",
                "setPanelState",
                "delTip",
                "delTipSucceed",
                "createTips",
                "closeTip",
                "closeTipSucceed",
                "toggleDeclareOrderTimeOutRangeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "formActions",
              "sourceValue": "actions/form",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/form.ts"
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "getWhiteListRequested",
              "importedName": "getWhiteListRequested",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 65,
                  "column": 57,
                  "index": 2267
                },
                "end": {
                  "line": 365,
                  "column": 1,
                  "index": 11190
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "earnExchangeActions",
            "collectionActions",
            "tipActions",
            "formActions",
            "metaActions"
          ],
          "objectPropertyMap": {
            "change": "change",
            "getWhiteListRequested": "getWhiteListRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/TradePasswordModal/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 38,
                  "column": 58,
                  "index": 1066
                },
                "end": {
                  "line": 99,
                  "column": 1,
                  "index": 2707
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/PageOptions/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 18,
                  "column": 51,
                  "index": 592
                },
                "end": {
                  "line": 162,
                  "column": 1,
                  "index": 4788
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundTT/StepOne/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 55,
                  "index": 1091
                },
                "end": {
                  "line": 149,
                  "column": 1,
                  "index": 4199
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundTT/StepThree/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "annexAction",
              "sourceValue": "actions/annex",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/annex.ts",
              "exportNames": [
                "uploadAnnexRequested",
                "uploadAnnexSucceed",
                "uploadAnnexFailed",
                "uploadAnnexInit",
                "previewAnnexRequested",
                "previewAnnexSucceed",
                "previewAnnexFailed",
                "previewAnnexInit",
                "deleteAnnex"
              ]
            },
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitAction",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 98,
                  "column": 42,
                  "index": 3296
                },
                "end": {
                  "line": 475,
                  "column": 1,
                  "index": 16010
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "annexAction",
            "refundAction",
            "submitAction",
            "metaActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundTT/StepTwo/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "annexAction",
              "sourceValue": "actions/annex",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/annex.ts",
              "exportNames": [
                "uploadAnnexRequested",
                "uploadAnnexSucceed",
                "uploadAnnexFailed",
                "uploadAnnexInit",
                "previewAnnexRequested",
                "previewAnnexSucceed",
                "previewAnnexFailed",
                "previewAnnexInit",
                "deleteAnnex"
              ]
            },
            {
              "isNamespace": true,
              "localName": "statusActions",
              "sourceValue": "actions/status",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/status.ts",
              "exportNames": ["toggleEntityStatus"]
            },
            {
              "isNamespace": true,
              "localName": "utilAction",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 128,
                  "column": 55,
                  "index": 4874
                },
                "end": {
                  "line": 539,
                  "column": 1,
                  "index": 17441
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "refundAction",
            "annexAction",
            "statusActions",
            "utilAction"
          ],
          "objectPropertyMap": {
            "initialize": "initialize",
            "change": "change",
            "push": "push",
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundMSG/StepOne/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 94,
                  "column": 47,
                  "index": 2555
                },
                "end": {
                  "line": 371,
                  "column": 1,
                  "index": 11297
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction"],
          "objectPropertyMap": {
            "push": "push",
            "reset": "reset",
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundMSG/StepTwo/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 65,
                  "column": 41,
                  "index": 1854
                },
                "end": {
                  "line": 211,
                  "column": 1,
                  "index": 6130
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction", "metaActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/CancelFixRateForm/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts",
              "exportNames": [
                "getFixRateListRequested",
                "getFixRateListSucceed",
                "getFixRateListFailed",
                "hideGetFixRateListError",
                "fixRateTradeRequested",
                "fixRateTradeSucceed",
                "fixRateTradeFailed",
                "hideFixRateTradeError",
                "fixRateTradeModal",
                "resetFixRateTrade",
                "resetTrade",
                "getContractRateRequested",
                "getContractRateSucceed",
                "getContractRateFailed",
                "hideGetContractRateError",
                "updateFixRateCountDownSeconds",
                "stopFixRateCountDown",
                "resetFixRateCountDownSeconds",
                "resetRate",
                "getOneFixRateRequested",
                "getOneFixRateSucceed",
                "getOneFixRateFailed",
                "hideGetOneFixRateError",
                "setCancelItem",
                "resetCancelItem",
                "cancelOneFixRateContractRequested",
                "cancelOneFixRateContractSucceed",
                "cancelOneFixRateContractFailed",
                "hideCancelOneFixRateContractError",
                "cancelOneFixRateContractModal",
                "resetCancelOneFixRateContract",
                "getFixRateMarginFeeRequested",
                "getFixRateMarginFeeSucceed",
                "getFixRateMarginFeeFailed",
                "hideGetFixRateMarginFeeError",
                "resetMarginFee",
                "getFixRateCancelFeeRequested",
                "getFixRateCancelFeeSucceed",
                "getFixRateCancelFeeFailed",
                "hideGetFixRateCancelFeeError",
                "resetFixRateCancelFee",
                "getContractDeadlineRequested",
                "getContractDeadlineSucceed",
                "getContractDeadlineFailed",
                "hideGetContractDeadlineError",
                "resetGetContractDeadline",
                "setFixRateQueryType",
                "validFixRateOrderDateRequested",
                "validFixRateOrderDateSucceed",
                "validFixRateOrderDateFailed",
                "hideValidFixRateOrderDateError",
                "resetValidFixRateOrderDate"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 142,
                  "column": 57,
                  "index": 4447
                },
                "end": {
                  "line": 386,
                  "column": 1,
                  "index": 12335
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/FixRateListQueryForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "queryActions",
              "sourceValue": "actions/query",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/query.ts",
              "exportNames": [
                "setFixRateQuery",
                "setOrderListQuery",
                "setWithdrawRecordsListQuery"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fixRateActions",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts",
              "exportNames": [
                "getFixRateListRequested",
                "getFixRateListSucceed",
                "getFixRateListFailed",
                "hideGetFixRateListError",
                "fixRateTradeRequested",
                "fixRateTradeSucceed",
                "fixRateTradeFailed",
                "hideFixRateTradeError",
                "fixRateTradeModal",
                "resetFixRateTrade",
                "resetTrade",
                "getContractRateRequested",
                "getContractRateSucceed",
                "getContractRateFailed",
                "hideGetContractRateError",
                "updateFixRateCountDownSeconds",
                "stopFixRateCountDown",
                "resetFixRateCountDownSeconds",
                "resetRate",
                "getOneFixRateRequested",
                "getOneFixRateSucceed",
                "getOneFixRateFailed",
                "hideGetOneFixRateError",
                "setCancelItem",
                "resetCancelItem",
                "cancelOneFixRateContractRequested",
                "cancelOneFixRateContractSucceed",
                "cancelOneFixRateContractFailed",
                "hideCancelOneFixRateContractError",
                "cancelOneFixRateContractModal",
                "resetCancelOneFixRateContract",
                "getFixRateMarginFeeRequested",
                "getFixRateMarginFeeSucceed",
                "getFixRateMarginFeeFailed",
                "hideGetFixRateMarginFeeError",
                "resetMarginFee",
                "getFixRateCancelFeeRequested",
                "getFixRateCancelFeeSucceed",
                "getFixRateCancelFeeFailed",
                "hideGetFixRateCancelFeeError",
                "resetFixRateCancelFee",
                "getContractDeadlineRequested",
                "getContractDeadlineSucceed",
                "getContractDeadlineFailed",
                "hideGetContractDeadlineError",
                "resetGetContractDeadline",
                "setFixRateQueryType",
                "validFixRateOrderDateRequested",
                "validFixRateOrderDateSucceed",
                "validFixRateOrderDateFailed",
                "hideValidFixRateOrderDateError",
                "resetValidFixRateOrderDate"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 46,
                  "column": 60,
                  "index": 1113
                },
                "end": {
                  "line": 159,
                  "column": 1,
                  "index": 4519
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["queryActions", "fixRateActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/FixRateTradeStepOne/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fixRate",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fixRate.ts",
              "exportNames": [
                "getFixRateListRequested",
                "getFixRateListSucceed",
                "getFixRateListFailed",
                "hideGetFixRateListError",
                "fixRateTradeRequested",
                "fixRateTradeSucceed",
                "fixRateTradeFailed",
                "hideFixRateTradeError",
                "fixRateTradeModal",
                "resetFixRateTrade",
                "resetTrade",
                "getContractRateRequested",
                "getContractRateSucceed",
                "getContractRateFailed",
                "hideGetContractRateError",
                "updateFixRateCountDownSeconds",
                "stopFixRateCountDown",
                "resetFixRateCountDownSeconds",
                "resetRate",
                "getOneFixRateRequested",
                "getOneFixRateSucceed",
                "getOneFixRateFailed",
                "hideGetOneFixRateError",
                "setCancelItem",
                "resetCancelItem",
                "cancelOneFixRateContractRequested",
                "cancelOneFixRateContractSucceed",
                "cancelOneFixRateContractFailed",
                "hideCancelOneFixRateContractError",
                "cancelOneFixRateContractModal",
                "resetCancelOneFixRateContract",
                "getFixRateMarginFeeRequested",
                "getFixRateMarginFeeSucceed",
                "getFixRateMarginFeeFailed",
                "hideGetFixRateMarginFeeError",
                "resetMarginFee",
                "getFixRateCancelFeeRequested",
                "getFixRateCancelFeeSucceed",
                "getFixRateCancelFeeFailed",
                "hideGetFixRateCancelFeeError",
                "resetFixRateCancelFee",
                "getContractDeadlineRequested",
                "getContractDeadlineSucceed",
                "getContractDeadlineFailed",
                "hideGetContractDeadlineError",
                "resetGetContractDeadline",
                "setFixRateQueryType",
                "validFixRateOrderDateRequested",
                "validFixRateOrderDateSucceed",
                "validFixRateOrderDateFailed",
                "hideValidFixRateOrderDateError",
                "resetValidFixRateOrderDate"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 210,
                  "column": 48,
                  "index": 5863
                },
                "end": {
                  "line": 879,
                  "column": 1,
                  "index": 28195
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "userActions",
            "meActions",
            "withdrawActions"
          ],
          "objectPropertyMap": {
            "change": "change",
            "touch": "touch",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Order/OrderTable/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "fetchMetaRequested",
              "importedName": "fetchMetaRequested",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts"
            },
            {
              "isNamespace": false,
              "localName": "toggleModalStatus",
              "importedName": "toggleModalStatus",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 64,
                  "column": 87,
                  "index": 1750
                },
                "end": {
                  "line": 193,
                  "column": 1,
                  "index": 4841
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "fetchMetaRequested": "fetchMetaRequested",
            "toggleModalStatus": "toggleModalStatus",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawChoose/helper.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 57,
                  "column": 43,
                  "index": 1634
                },
                "end": {
                  "line": 155,
                  "column": 1,
                  "index": 4997
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "reset": "reset",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawFXApplyForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "couponActions",
              "sourceValue": "actions/coupon",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/coupon.ts",
              "exportNames": [
                "couponQueryRequested",
                "couponQuerySucceed",
                "couponQueryFailed",
                "couponQueryError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "ticketActions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xptransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "toggleModalStatus",
              "importedName": "toggleModalStatus",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 154,
                  "column": 54,
                  "index": 5860
                },
                "end": {
                  "line": 899,
                  "column": 1,
                  "index": 29323
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "couponActions",
            "ticketActions",
            "withdrawalsActions",
            "metaActions",
            "xptransferActions",
            "submitActions",
            "fundActions"
          ],
          "objectPropertyMap": {
            "reset": "reset",
            "push": "push",
            "touch": "touch",
            "change": "change",
            "toggleModalStatus": "toggleModalStatus"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawFXReApplyForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 126,
                  "column": 71,
                  "index": 3830
                },
                "end": {
                  "line": 444,
                  "column": 1,
                  "index": 14948
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions", "withdrawalsActions"],
          "objectPropertyMap": {
            "reset": "reset",
            "change": "change",
            "touch": "touch"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/TransferAddMaterialForm/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 84,
                  "column": 63,
                  "index": 2745
                },
                "end": {
                  "line": 343,
                  "column": 1,
                  "index": 11218
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "fileActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/TransferApplyForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xptransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "idsActions",
              "sourceValue": "actions/ids",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ids.ts",
              "exportNames": ["setIds", "setCurIds", "resetIds"]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 109,
                  "column": 56,
                  "index": 4101
                },
                "end": {
                  "line": 826,
                  "column": 1,
                  "index": 28888
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "userActions",
            "utilActions",
            "xptransferActions",
            "metaActions",
            "submitActions",
            "idsActions"
          ],
          "objectPropertyMap": {
            "push": "push",
            "change": "change",
            "touch": "touch",
            "initialize": "initialize",
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawListQueryForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 37,
                  "column": 61,
                  "index": 1065
                },
                "end": {
                  "line": 151,
                  "column": 1,
                  "index": 4415
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/WithdrawSetting/WithdrawTable/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "downloadActions",
              "sourceValue": "actions/download",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/download.ts",
              "exportNames": ["downloadRequested", "downloadSucceed", "downloadFailed"]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 239,
                  "column": 53,
                  "index": 7296
                },
                "end": {
                  "line": 365,
                  "column": 1,
                  "index": 11198
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "downloadActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/StatementDownloadForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 59,
                  "column": 61,
                  "index": 1423
                },
                "end": {
                  "line": 173,
                  "column": 1,
                  "index": 5494
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/StatementQueryForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vaActions",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts",
              "exportNames": [
                "collectionListRequested",
                "collectionListSucceed",
                "collectionListFailed",
                "hideCollectionListError",
                "addCollectionRequested",
                "addCollectionSucceed",
                "addCollectionFailed",
                "resetAddCollection",
                "hideAddCollectionError",
                "reAddCollectionRequested",
                "oneCollectionRequested",
                "oneCollectionSucceed",
                "oneCollectionFailed",
                "hideOneCollectionError",
                "allServerProviderRequested",
                "allServerProviderSucceed",
                "allServerProviderFailed",
                "hideAllServerProviderError",
                "changeVaStatusRequested",
                "changeVaStatusSucceed",
                "changeVaStatusFailed",
                "toggleSleepModal",
                "depositLimitRequested",
                "depositLimitSucceed",
                "depositLimitFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 66,
                  "column": 58,
                  "index": 1960
                },
                "end": {
                  "line": 258,
                  "column": 1,
                  "index": 7582
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions", "vaActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/StatementPerMonthQueryForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "statementActions",
              "sourceValue": "actions/statement",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/statement.ts",
              "exportNames": [
                "test",
                "queryData",
                "preQuery",
                "querySucceed",
                "queryFailed",
                "showError",
                "setShowError",
                "queryPerMonthRequested",
                "queryPerMonthSucceed",
                "queryPerMonthFailed",
                "setPerMonthShowError",
                "billListDownloadRequested",
                "billListDownloadSucceed",
                "billListDownloadFailed",
                "toggleBillListDownloadModal",
                "resetBillListDownload",
                "queryPaymentRequested",
                "queryPaymentSucceed",
                "queryPaymentFailed",
                "paymentDetailRequested",
                "paymentDetailSucceed",
                "paymentDetailFailed",
                "repaymentRequested",
                "repaymentSucceed",
                "repaymentFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vaActions",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts",
              "exportNames": [
                "collectionListRequested",
                "collectionListSucceed",
                "collectionListFailed",
                "hideCollectionListError",
                "addCollectionRequested",
                "addCollectionSucceed",
                "addCollectionFailed",
                "resetAddCollection",
                "hideAddCollectionError",
                "reAddCollectionRequested",
                "oneCollectionRequested",
                "oneCollectionSucceed",
                "oneCollectionFailed",
                "hideOneCollectionError",
                "allServerProviderRequested",
                "allServerProviderSucceed",
                "allServerProviderFailed",
                "hideAllServerProviderError",
                "changeVaStatusRequested",
                "changeVaStatusSucceed",
                "changeVaStatusFailed",
                "toggleSleepModal",
                "depositLimitRequested",
                "depositLimitSucceed",
                "depositLimitFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 57,
                  "column": 66,
                  "index": 1764
                },
                "end": {
                  "line": 161,
                  "column": 1,
                  "index": 4696
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["statementActions", "vaActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/ExchangeModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "stepActions",
              "sourceValue": "actions/step",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/step.ts",
              "exportNames": ["setStep"]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 31,
                  "column": 63,
                  "index": 755
                },
                "end": {
                  "line": 80,
                  "column": 1,
                  "index": 2197
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["stepActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/components/Details/refund.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 321,
                  "column": 62,
                  "index": 9333
                },
                "end": {
                  "line": 321,
                  "column": 67,
                  "index": 9338
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/components/Details/withdrawAndTransfer.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 125,
                  "column": 62,
                  "index": 3251
                },
                "end": {
                  "line": 125,
                  "column": 67,
                  "index": 3256
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Action/StepOne/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "_BalancePayment",
              "loc": {
                "start": {
                  "line": 156,
                  "column": 86,
                  "index": 4877
                },
                "end": {
                  "line": 156,
                  "column": 101,
                  "index": 4892
                },
                "identifierName": "_BalancePayment"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["meActions"],
          "objectPropertyMap": {}
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "meActions",
              "sourceValue": "actions/me",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/me.ts",
              "exportNames": [
                "getProfileRequested",
                "getProfileSucceed",
                "getProfileFailed",
                "setProfile",
                "accountRequested",
                "accountSucceed",
                "accountFailed",
                "hideAccountError",
                "userPowerRequested",
                "userPowerSucceed",
                "userPowerFailed",
                "getDepositTodoRequested",
                "getDepositTodoSucceed",
                "getDepositTodoFailed",
                "setXtMethod",
                "setTransferNotice",
                "reset",
                "platformRequested",
                "platformSucceed",
                "platformFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/earnExchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/earnExchange.ts",
              "exportNames": [
                "earnExchangeListRequested",
                "earnExchangeListSucceed",
                "earnExchangeListFailed",
                "hideEarnExchangeListError",
                "setQueryEarnExchangeListType",
                "viewRelatedOrderListRequested",
                "viewRelatedOrderListSucceed",
                "viewRelatedOrderListFailed",
                "hideViewRelatedOrderListError",
                "queryReceiveMoneyOrderListRequested",
                "queryReceiveMoneyOrderListSucceed",
                "queryReceiveMoneyOrderListFailed",
                "hideQueryReceiveMoneyOrderListError",
                "queryReceiveMoneyOrderDetailRequested",
                "queryReceiveMoneyOrderDetailSucceed",
                "queryReceiveMoneyOrderDetailFailed",
                "hideQueryReceiveMoneyOrderDetailError",
                "resetRelateDetail",
                "setHasUpdateOrder",
                "resetSetHasUpdateOrder",
                "switchRelatedOrderModal",
                "earnListDownloadRequested",
                "earnListDownloadSucceed",
                "earnListDownloadFailed",
                "toggleEarnListDownloadModal",
                "resetEarnListDownload",
                "cancelRelateRequested",
                "cancelRelateSucceed",
                "cancelRelateFailed",
                "resetCancelRelate",
                "setCancelRelateModal"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withDrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "replace",
              "importedName": "replace",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 515,
                  "column": 85,
                  "index": 14681
                },
                "end": {
                  "line": 515,
                  "column": 90,
                  "index": 14686
                },
                "identifierName": "Index"
              }
            }
          ],
          "warnings": [
            "[Warning] #249 lastArgument.type !== \"Identifier\" (start line: 77, start column: 24, end line: 154",
            ", end column: 2)"
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "meActions",
            "actions",
            "withDrawActions",
            "metaActions"
          ],
          "objectPropertyMap": {
            "replace": "replace",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Action/StepTwo/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 337,
                  "column": 85,
                  "index": 9217
                },
                "end": {
                  "line": 337,
                  "column": 90,
                  "index": 9222
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Action/StepThree/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 177,
                  "column": 62,
                  "index": 5244
                },
                "end": {
                  "line": 177,
                  "column": 67,
                  "index": 5249
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "initialize": "initialize",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Action/StepFour/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 31,
                  "column": 62,
                  "index": 750
                },
                "end": {
                  "line": 31,
                  "column": 67,
                  "index": 755
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/PartnerPlanForm/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/partner",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/partner.ts",
              "exportNames": [
                "bindInviteCodeRequested",
                "bindInviteCodeSucceed",
                "bindInviteCodeFailed",
                "hideBindInviteCodeError",
                "initInviteCodeRequested",
                "initInviteCodeSucceed",
                "initInviteCodeFailed",
                "hideInitInviteCodeError",
                "togglePartnerEditable",
                "authorizeRequested",
                "authorizeSucceed",
                "authorizeFailed",
                "authorizeRefresh",
                "applyReportRequest",
                "applyReportSucceed",
                "applyReportFailed",
                "downloadReportRequest",
                "downloadReportSucceed",
                "downloadReportFailed",
                "getPartnerInfoRequested",
                "getPartnerInfoSucceed",
                "getPartnerInfoFailed",
                "loadReportMoreRequested",
                "changeTag",
                "loadReportMoreSucceed",
                "loadReportMoreFailed",
                "toggleShowAuditReason",
                "getOtherPartnerInfoRequested",
                "getOtherPartnerInfoSucceed",
                "getOtherPartnerInfoFailed",
                "loadOtherReportMoreRequested",
                "changeOtherReportTag",
                "loadOtherReportMoreSucceed",
                "loadOtherReportMoreFailed",
                "toggleOtherShowAuditReason",
                "updateOtherPartnerStatus",
                "updateOtherPartnerPermission",
                "submitPartnerRequested",
                "submitPartnerSucceed",
                "submitPartnerFailed",
                "updateBankCardValidationStatus",
                "submitPartnerSubAccountRequested",
                "submitPartnerSubAccountSucceed",
                "submitPartnerSubAccountFailed",
                "disablePartnerSubAccountRequested",
                "disablePartnerSubAccountSucceed",
                "disablePartnerSubAccountFailed",
                "permitPartnerSubAccountRequested",
                "permitPartnerSubAccountSucceed",
                "permitPartnerSubAccountFailed",
                "limitPartnerSubAccountRequested",
                "limitPartnerSubAccountSucceed",
                "limitPartnerSubAccountFailed",
                "partnerBindRequested",
                "partnerBindSucceed",
                "partnerBindFailed",
                "partnerBindInit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 74,
                  "column": 55,
                  "index": 2107
                },
                "end": {
                  "line": 186,
                  "column": 1,
                  "index": 5275
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Coupon/index.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/auth",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/auth.ts",
              "exportNames": [
                "oauthRequested",
                "oauthSucceed",
                "logoutRequested",
                "logoutSucceed",
                "unauthorized",
                "signInRequested",
                "signInSucceed",
                "signInFailed",
                "initSignIn",
                "wechatSignInRequested",
                "wechatSignInSucceed",
                "wechatSignInFailed",
                "setWechatSignInSliderData",
                "setWechatSignInSliderError",
                "initWechatSignIn",
                "setWechatSignInState",
                "pollingQRScannedRequested",
                "pollingQRScannedSucceed",
                "pollingQRScannedFailed",
                "pollingQRConfirmedRequested",
                "pollingQRConfirmedSucceed",
                "pollingQRConfirmedFailed",
                "resetQRConfirmed",
                "qrcodeSigninRequested"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 26,
                  "column": 50,
                  "index": 567
                },
                "end": {
                  "line": 70,
                  "column": 1,
                  "index": 1965
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/BasicSet/ResultView/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "basicSetActions",
              "sourceValue": "actions/basicSet",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/basicSet.ts",
              "exportNames": [
                "createOrUpdateFirmInfoRequested",
                "createOrUpdateFirmInfoSucceed",
                "createOrUpdateFirmInfoFailed",
                "hideCreateOrUpdateFirmInfoError",
                "resetCreateOrUpdateFirmStepInfo",
                "setNextButtonLoading",
                "setFirmVerificationStep",
                "setFirmVerificationDifferCellsFlag",
                "clearFirmVerificationDifferCellsFlag",
                "toggleOtherArea",
                "updateTargetFirmItem",
                "saveUpdateData"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 369,
                  "column": 50,
                  "index": 11001
                },
                "end": {
                  "line": 492,
                  "column": 1,
                  "index": 15371
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["basicSetActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/OperationListQueryForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "staffActions",
              "sourceValue": "actions/staff",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/staff.ts",
              "exportNames": [
                "staffSuffixRequested",
                "staffSuffixSucceed",
                "staffSuffixFailed",
                "toggleStaffSuffixModal",
                "hideStaffSuffixError",
                "modifyStaffSuffixRequested",
                "modifyStaffSuffixSucceed",
                "modifyStaffSuffixFailed",
                "toggleModifyStaffSuffixModal",
                "resetModifyStaffSuffix",
                "addStaffRequested",
                "addStaffSucceed",
                "addStaffFailed",
                "setAddStaffStep",
                "hideAddStaffError",
                "setAddStaffAccount",
                "resetAddStaff",
                "staffListRequested",
                "staffListSucceed",
                "staffListFailed",
                "setStaffListStatus",
                "resetStaffList",
                "oneStaffInfoRequested",
                "oneStaffInfoSucceed",
                "oneStaffInfoFailed",
                "updateOneStaffRequested",
                "updateOneStaffSucceed",
                "updateOneStaffFailed",
                "hideUpdateOneStaffError",
                "resetUpdateOneStaff",
                "delOneStaffRequested",
                "delOneStaffSucceed",
                "delOneStaffFailed",
                "hideDelOneStaffError",
                "toggleDelOneStaffModal",
                "resetStaffPwRequested",
                "resetStaffPwSucceed",
                "resetStaffPwFailed",
                "genResetStaffPassword",
                "toggleResetStaffPwModal",
                "resetResetStaffPw",
                "assignStaffDepositRequested",
                "assignStaffDepositSucceed",
                "assignStaffDepositFailed",
                "toggleAssignStaffDepositModal",
                "setDepositIdsWaitAssign",
                "addDepositIdsWaitAssign",
                "removeDepositIdsWaitAssign",
                "resetDepositIdsWaitAssign",
                "resetAssignStaffDeposit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 34,
                  "column": 72,
                  "index": 1155
                },
                "end": {
                  "line": 127,
                  "column": 1,
                  "index": 4143
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "staffActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawFXAddForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 306,
                  "column": 57,
                  "index": 9316
                },
                "end": {
                  "line": 1348,
                  "column": 1,
                  "index": 43100
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "fileActions",
            "withdrawalsActions",
            "securityActions",
            "vcodeActions",
            "modalActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "reset": "reset",
            "touch": "touch",
            "push": "push",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/AddWithdrawalAccount/StepOne.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 276,
                  "column": 77,
                  "index": 10704
                },
                "end": {
                  "line": 708,
                  "column": 1,
                  "index": 23862
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "fileActions", "utilActions", "metaActions"],
          "objectPropertyMap": {
            "initialize": "initialize",
            "reset": "reset",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/AddWithdrawalAccount/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form",
              "dependencyPath": "redux-form"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 129,
                  "column": 80,
                  "index": 4258
                },
                "end": {
                  "line": 383,
                  "column": 1,
                  "index": 12224
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "fileActions",
            "submitActions",
            "withdrawActions"
          ],
          "objectPropertyMap": {
            "reset": "reset"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/AddTransferAccount/StepOne.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 342,
                  "column": 60,
                  "index": 12790
                },
                "end": {
                  "line": 1084,
                  "column": 1,
                  "index": 38501
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "fileActions", "utilActions", "metaActions"],
          "objectPropertyMap": {
            "touch": "touch",
            "change": "change",
            "initialize": "initialize",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/AddTransferAccount/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form",
              "dependencyPath": "redux-form"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 129,
                  "column": 57,
                  "index": 4041
                },
                "end": {
                  "line": 434,
                  "column": 1,
                  "index": 15545
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "actions",
            "fileActions",
            "userActions",
            "submitActions"
          ],
          "objectPropertyMap": {
            "reset": "reset"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/BindPhoneForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "CallExpression",
              "loc": {
                "start": {
                  "line": 67,
                  "column": 1,
                  "index": 1897
                },
                "end": {
                  "line": 167,
                  "column": 2,
                  "index": 5389
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["userActions", "vcodeActions", "securityActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/MessageItem/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/auth",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/auth.ts",
              "exportNames": [
                "oauthRequested",
                "oauthSucceed",
                "logoutRequested",
                "logoutSucceed",
                "unauthorized",
                "signInRequested",
                "signInSucceed",
                "signInFailed",
                "initSignIn",
                "wechatSignInRequested",
                "wechatSignInSucceed",
                "wechatSignInFailed",
                "setWechatSignInSliderData",
                "setWechatSignInSliderError",
                "initWechatSignIn",
                "setWechatSignInState",
                "pollingQRScannedRequested",
                "pollingQRScannedSucceed",
                "pollingQRScannedFailed",
                "pollingQRConfirmedRequested",
                "pollingQRConfirmedSucceed",
                "pollingQRConfirmedFailed",
                "resetQRConfirmed",
                "qrcodeSigninRequested"
              ]
            },
            {
              "isNamespace": true,
              "localName": "messageActions",
              "sourceValue": "actions/message",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/message.ts",
              "exportNames": [
                "preQuery",
                "queryData",
                "querySucceed",
                "queryFailed",
                "queryUnread",
                "queryUnreadSucceed",
                "queryUnreadFailed",
                "markLocalAllReaded",
                "markServerAllReaded",
                "markAllReadedSucceed",
                "markAllReadedFailed",
                "markLocalSingleReaded",
                "markServerSingleReaded",
                "markServerSingleReadedSucceed",
                "markServerSingleReadedFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "MessageItem",
              "loc": {
                "start": {
                  "line": 2658,
                  "column": 2,
                  "index": 71108
                },
                "end": {
                  "line": 2658,
                  "column": 13,
                  "index": 71119
                },
                "identifierName": "MessageItem"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "messageActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/SwapRecordsQueryListForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fundSwapActions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 42,
                  "column": 64,
                  "index": 1134
                },
                "end": {
                  "line": 177,
                  "column": 1,
                  "index": 5146
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["fundSwapActions", "withdrawActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Swap/SwapTable/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 81,
                  "column": 49,
                  "index": 2827
                },
                "end": {
                  "line": 165,
                  "column": 1,
                  "index": 5358
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/ExrecordDownloadForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fundSwapActions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 61,
                  "column": 60,
                  "index": 1577
                },
                "end": {
                  "line": 186,
                  "column": 1,
                  "index": 5510
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["fundSwapActions"],
          "objectPropertyMap": {
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/SwapExchangeForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "trendActions",
              "sourceValue": "actions/trend",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/trend.ts",
              "exportNames": [
                "rateTrendRequested",
                "rateTrendSucceed",
                "rateTrendFailed",
                "resetRateTrend",
                "setRateTrendRange"
              ]
            },
            {
              "isNamespace": false,
              "localName": "queryRestrictionList",
              "importedName": "queryRestrictionList",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 103,
                  "column": 41,
                  "index": 3696
                },
                "end": {
                  "line": 1147,
                  "column": 1,
                  "index": 38811
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "trendActions"],
          "objectPropertyMap": {
            "queryRestrictionList": "queryRestrictionList",
            "change": "change",
            "touch": "touch"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Swap/SwapExchange/helper.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "countdownActions",
              "sourceValue": "actions/countdown",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/countdown.ts",
              "exportNames": ["setCountDown", "setSeconds", "stopSeconds"]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 35,
                  "column": 47,
                  "index": 1104
                },
                "end": {
                  "line": 203,
                  "column": 1,
                  "index": 6268
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "countdownActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerTransfer/XTPartnerTransferApply/components/TransferConfirm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xptransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 58,
                  "column": 40,
                  "index": 1400
                },
                "end": {
                  "line": 219,
                  "column": 1,
                  "index": 6026
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions", "xptransferActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerTransfer/XTPartnerTransferApply/components/TransferInformation/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 130,
                  "column": 59,
                  "index": 4944
                },
                "end": {
                  "line": 373,
                  "column": 1,
                  "index": 13135
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions", "userActions"],
          "objectPropertyMap": {
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XTPartner/XTPartnerRefund/XTPartnerRefundApply/components/RefundInformation/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 73,
                  "column": 59,
                  "index": 1888
                },
                "end": {
                  "line": 156,
                  "column": 1,
                  "index": 4120
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions", "userActions"],
          "objectPropertyMap": {
            "push": "push",
            "change": "change",
            "touch": "touch"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/PartnerLoginForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 66,
                  "column": 54,
                  "index": 2647
                },
                "end": {
                  "line": 171,
                  "column": 1,
                  "index": 5759
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "securityActions",
            "submitActions",
            "userActions",
            "vcodeActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XtBean/components/XtBeanSpend/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "replace",
              "importedName": "replace",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "XtBeanSpend",
              "loc": {
                "start": {
                  "line": 357,
                  "column": 13,
                  "index": 11116
                },
                "end": {
                  "line": 357,
                  "column": 24,
                  "index": 11127
                },
                "identifierName": "XtBeanSpend"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "replace": "replace"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/OrderExchangeStep/StepOne/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "getUserFlowId",
              "importedName": "getUserFlowId",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #230 lastArguments.length !== 1 (start line: 178, start column: 18, end line: 178",
            ", end column: 62)"
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "getUserFlowId": "getUserFlowId",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/OrderExchangeStep/StepThree/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepThree",
              "loc": {
                "start": {
                  "line": 69,
                  "column": 2,
                  "index": 1814
                },
                "end": {
                  "line": 69,
                  "column": 11,
                  "index": 1823
                },
                "identifierName": "StepThree"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/OrderExchangeStep/StepTwo/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepTwo",
              "loc": {
                "start": {
                  "line": 210,
                  "column": 2,
                  "index": 5452
                },
                "end": {
                  "line": 210,
                  "column": 9,
                  "index": 5459
                },
                "identifierName": "StepTwo"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawEasyFXApplyForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "withdrawalsActions",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts",
              "exportNames": [
                "accountListRequested",
                "accountListSucceed",
                "accountListFailed",
                "hideAccountListError",
                "deleteItemRequested",
                "deleteItemSucceed",
                "deleteItemFailed",
                "swithDeleteItemModal",
                "setDeleteItemId",
                "setDeleteItemType",
                "hideDeleteItemError",
                "historyDetailRequested",
                "historyDetailSucceed",
                "historyDetailFailed",
                "hideHistoryDetailError",
                "createAccountRequested",
                "createAccountSucceed",
                "createAccountFailed",
                "setCreateAccountStep",
                "resetCreateAccount",
                "hideCreateAccountError",
                "withdrawFXAddRequested",
                "withdrawFXAddSucceed",
                "withdrawFXAddFailed",
                "hideWithdrawFXAddError",
                "setWithdrawFXAddStep",
                "resetWithdrawFXAdd",
                "withdrawFXAddVerifyRequested",
                "withdrawFXAddVerifySucceed",
                "withdrawFXAddVerifyFailed",
                "queryBanks",
                "queryBanksSucceed",
                "queryBanksFailed",
                "queryProvinces",
                "queryProvincesSucceed",
                "queryProvincesFailed",
                "getLegalProfile",
                "getLegalProfileSucceed",
                "getLegalProfileFailed",
                "createTransferAccountRequested",
                "createTransferAccountSucceed",
                "createTransferAccountFailed",
                "hideCreateTransferAccountError",
                "setCreateTransferAccountStep",
                "resetCreateTransferAccount",
                "setBeneficiaryNameError",
                "getBeneficiayAccountNoRequested",
                "getBeneficiayAccountNoSucceed",
                "getBeneficiayAccountNoFailed",
                "resetBeneficiayAccountNo",
                "getAccountLimitRequested",
                "getAccountLimitSucceed",
                "getAccountLimitFailed",
                "bindAccountPhoneNoRequested",
                "bindAccountPhoneNoSucceed",
                "bindAccountPhoneNoFailed",
                "bindAccountPhoneNoVerifyFailed",
                "swithBindPhoneNoModal",
                "getBeneficiayPhoneNoRequested",
                "getBeneficiayPhoneNoSucceed",
                "getBeneficiayPhoneNoFailed",
                "resetBeneficiayPhoneNo",
                "getFXPrivateAgreementRequested",
                "getFXPrivateAgreementSucceed",
                "getFXPrivateAgreementFailed",
                "getFXPublicAgreementRequested",
                "getFXPublicAgreementSucceed",
                "getFXPublicAgreementFailed",
                "getTransferPublicAgreementRequested",
                "getTransferPublicAgreementSucceed",
                "getTransferPublicAgreementFailed",
                "getWithdrawNormalAgreementRequested",
                "getWithdrawNormalAgreementSucceed",
                "getWithdrawNormalAgreementFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "xptransferActions",
              "sourceValue": "actions/xpTransfer",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xpTransfer.ts",
              "exportNames": [
                "pendingSpotsRequested",
                "pendingSpotsSucceed",
                "pendingSpotsFailed",
                "supportCurrencyRequested",
                "supportCurrencySucceed",
                "supportCurrencyFailed",
                "pricingListRequested",
                "pricingListSucceed",
                "pricingListFailed",
                "innerTransferApplyRequested",
                "innerTransferApplySucceed",
                "innerTransferApplyFailed",
                "initInnerTransferApply",
                "setXPTransferApplyStep",
                "innerTransferDetailRequested",
                "innerTransferDetailSucceed",
                "innerTransferDetailFailed",
                "innerTransferListRequested",
                "innerTransferListSucceed",
                "innerTransferListFailed",
                "exportTransferRequested",
                "exportTransferSucceed",
                "exportTransferFailed",
                "setTransferModal",
                "updateApplyCheckList",
                "initApplyCheckList"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fundActions",
              "sourceValue": "actions/fund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fund.ts",
              "exportNames": [
                "getFrozenListRequested",
                "getFrozenListSucceed",
                "getFrozenListFailed",
                "initFrozenList",
                "getWithDrawSpeedFlagRequested",
                "getWithDrawSpeedFlagSucceed",
                "getWithDrawSpeedFlagFailed",
                "getWithDrawDateRequested",
                "getWithDrawDateSucceed",
                "getWithDrawDateFailed",
                "getBankCardInfoRequested",
                "getBankCardInfoSucceed",
                "getBankCardInfoFailed",
                "resetBankCardInfo"
              ]
            },
            {
              "isNamespace": false,
              "localName": "reset",
              "importedName": "reset",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "toggleModalStatus",
              "importedName": "toggleModalStatus",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 103,
                  "column": 58,
                  "index": 3718
                },
                "end": {
                  "line": 416,
                  "column": 1,
                  "index": 12659
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "withdrawActions",
            "withdrawalsActions",
            "metaActions",
            "xptransferActions",
            "submitActions",
            "fundActions"
          ],
          "objectPropertyMap": {
            "reset": "reset",
            "push": "push",
            "touch": "touch",
            "change": "change",
            "toggleModalStatus": "toggleModalStatus"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LoanWithdraw/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepTwo",
              "loc": {
                "start": {
                  "line": 242,
                  "column": 2,
                  "index": 7145
                },
                "end": {
                  "line": 242,
                  "column": 9,
                  "index": 7152
                },
                "identifierName": "StepTwo"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "changeFormValue": "change",
            "destroyForm": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/SliderVerification/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "authActions",
              "sourceValue": "actions/auth",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/auth.ts",
              "exportNames": [
                "oauthRequested",
                "oauthSucceed",
                "logoutRequested",
                "logoutSucceed",
                "unauthorized",
                "signInRequested",
                "signInSucceed",
                "signInFailed",
                "initSignIn",
                "wechatSignInRequested",
                "wechatSignInSucceed",
                "wechatSignInFailed",
                "setWechatSignInSliderData",
                "setWechatSignInSliderError",
                "initWechatSignIn",
                "setWechatSignInState",
                "pollingQRScannedRequested",
                "pollingQRScannedSucceed",
                "pollingQRScannedFailed",
                "pollingQRConfirmedRequested",
                "pollingQRConfirmedSucceed",
                "pollingQRConfirmedFailed",
                "resetQRConfirmed",
                "qrcodeSigninRequested"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "errorActions",
              "sourceValue": "actions/error",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/error.ts",
              "exportNames": ["specificSpotError"]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 31,
                  "column": 58,
                  "index": 723
                },
                "end": {
                  "line": 128,
                  "column": 1,
                  "index": 3362
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["authActions", "userActions", "errorActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/SliderTencent/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "authActions",
              "sourceValue": "actions/auth",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/auth.ts",
              "exportNames": [
                "oauthRequested",
                "oauthSucceed",
                "logoutRequested",
                "logoutSucceed",
                "unauthorized",
                "signInRequested",
                "signInSucceed",
                "signInFailed",
                "initSignIn",
                "wechatSignInRequested",
                "wechatSignInSucceed",
                "wechatSignInFailed",
                "setWechatSignInSliderData",
                "setWechatSignInSliderError",
                "initWechatSignIn",
                "setWechatSignInState",
                "pollingQRScannedRequested",
                "pollingQRScannedSucceed",
                "pollingQRScannedFailed",
                "pollingQRConfirmedRequested",
                "pollingQRConfirmedSucceed",
                "pollingQRConfirmedFailed",
                "resetQRConfirmed",
                "qrcodeSigninRequested"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 48,
                  "column": 104,
                  "index": 1297
                },
                "end": {
                  "line": 140,
                  "column": 1,
                  "index": 3580
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["authActions", "userActions", "securityActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/RegisterForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/register",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/register.ts",
              "exportNames": [
                "registerStepOneRequested",
                "registerStepOneSucceed",
                "registerStepOneFailed",
                "hideRegisterStepOneError",
                "registerStepTwoRequested",
                "registerStepTwoSucceed",
                "registerStepTwoFailed",
                "hideRegisterStepTwoError",
                "setRegisterStep",
                "resetRegister"
              ]
            },
            {
              "isNamespace": true,
              "localName": "pwStrengthActions",
              "sourceValue": "actions/pwStrength",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/pwStrength.ts",
              "exportNames": ["setPwStrength", "resetPwStrength"]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 88,
                  "column": 52,
                  "index": 2360
                },
                "end": {
                  "line": 136,
                  "column": 1,
                  "index": 4071
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions", "pwStrengthActions", "userActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoan/BeforeAssign.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "BeforeAssign",
              "loc": {
                "start": {
                  "line": 126,
                  "column": 3,
                  "index": 3415
                },
                "end": {
                  "line": 126,
                  "column": 15,
                  "index": 3427
                },
                "identifierName": "BeforeAssign"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoan/AfterAssign.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "AfterAssign",
              "loc": {
                "start": {
                  "line": 89,
                  "column": 106,
                  "index": 2489
                },
                "end": {
                  "line": 89,
                  "column": 117,
                  "index": 2500
                },
                "identifierName": "AfterAssign"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/MyLoans/BalanceInfo.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "BalanceInfo",
              "loc": {
                "start": {
                  "line": 98,
                  "column": 2,
                  "index": 2622
                },
                "end": {
                  "line": 98,
                  "column": 13,
                  "index": 2633
                },
                "identifierName": "BalanceInfo"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LoanWithdraw/StepFour.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "clearForms",
              "importedName": "clearForms",
              "sourceValue": "enterpriseFinancing/actions/loanWithdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/actions/loanWithdraw.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepFour",
              "loc": {
                "start": {
                  "line": 128,
                  "column": 2,
                  "index": 3233
                },
                "end": {
                  "line": 128,
                  "column": 10,
                  "index": 3241
                },
                "identifierName": "StepFour"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "clearForms": "clearForms"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LoanWithdraw/StepOne.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "queryBanks",
              "importedName": "queryBanks",
              "sourceValue": "actions/withdrawals",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdrawals.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepOne",
              "loc": {
                "start": {
                  "line": 442,
                  "column": 2,
                  "index": 15319
                },
                "end": {
                  "line": 442,
                  "column": 9,
                  "index": 15326
                },
                "identifierName": "StepOne"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "queryBanks": "queryBanks"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LoanWithdraw/StepThree.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepThree",
              "loc": {
                "start": {
                  "line": 348,
                  "column": 2,
                  "index": 11432
                },
                "end": {
                  "line": 348,
                  "column": 11,
                  "index": 11441
                },
                "identifierName": "StepThree"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoanApplication/StepOne.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "previewActions",
              "sourceValue": "actions/preview",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/preview.ts",
              "exportNames": [
                "preview",
                "previewLoading",
                "removePreview",
                "resetAllPreview"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepOne",
              "loc": {
                "start": {
                  "line": 181,
                  "column": 2,
                  "index": 5928
                },
                "end": {
                  "line": 181,
                  "column": 9,
                  "index": 5935
                },
                "identifierName": "StepOne"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "securityActions",
            "userActions",
            "vcodeActions",
            "fileActions",
            "previewActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoanApplication/StepThree.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepThree",
              "loc": {
                "start": {
                  "line": 124,
                  "column": 2,
                  "index": 3702
                },
                "end": {
                  "line": 124,
                  "column": 11,
                  "index": 3711
                },
                "identifierName": "StepThree"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/OrderLoanApplication/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "applySubmitStart",
              "importedName": "applySubmitStart",
              "sourceValue": "enterpriseFinancing/actions/orderLoan",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/actions/orderLoan.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepTwo",
              "loc": {
                "start": {
                  "line": 199,
                  "column": 2,
                  "index": 5946
                },
                "end": {
                  "line": 199,
                  "column": 9,
                  "index": 5953
                },
                "identifierName": "StepTwo"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "applySubmitStart": "applySubmitStart"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/Repayment/RepaymentContent.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ArrowFunctionExpression",
              "loc": {
                "start": {
                  "line": 90,
                  "column": 2,
                  "index": 3225
                },
                "end": {
                  "line": 191,
                  "column": 1,
                  "index": 5594
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ArrowFunctionExpression",
              "loc": {
                "start": {
                  "line": 217,
                  "column": 2,
                  "index": 6233
                },
                "end": {
                  "line": 484,
                  "column": 1,
                  "index": 13677
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        },
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ArrowFunctionExpression",
              "loc": {
                "start": {
                  "line": 512,
                  "column": 2,
                  "index": 14448
                },
                "end": {
                  "line": 774,
                  "column": 1,
                  "index": 21497
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LegalMobileModify/StepOne.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepOne",
              "loc": {
                "start": {
                  "line": 119,
                  "column": 2,
                  "index": 3704
                },
                "end": {
                  "line": 119,
                  "column": 9,
                  "index": 3711
                },
                "identifierName": "StepOne"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["securityActions", "userActions", "vcodeActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LegalMobileModify/StepThree.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepThree",
              "loc": {
                "start": {
                  "line": 60,
                  "column": 2,
                  "index": 1467
                },
                "end": {
                  "line": 60,
                  "column": 11,
                  "index": 1476
                },
                "identifierName": "StepThree"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/containers/LegalMobileModify/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepTwo",
              "loc": {
                "start": {
                  "line": 129,
                  "column": 2,
                  "index": 3928
                },
                "end": {
                  "line": 129,
                  "column": 9,
                  "index": 3935
                },
                "identifierName": "StepTwo"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Steps/BindEmailOrMobileOperate/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "BindEmailOrMobileOperate",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 2,
                  "index": 750
                },
                "end": {
                  "line": 36,
                  "column": 26,
                  "index": 774
                },
                "identifierName": "BindEmailOrMobileOperate"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Steps/SetPasswordOperate/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "SetPasswordOperate",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 2,
                  "index": 754
                },
                "end": {
                  "line": 36,
                  "column": 20,
                  "index": 772
                },
                "identifierName": "SetPasswordOperate"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/middlewares/AdvertiseControl.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "contentActions",
              "sourceValue": "actions/content",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/content.ts",
              "exportNames": [
                "getAdvertiseRequested",
                "getAdvertiseSucceed",
                "getAdvertiseFailed",
                "getModuleContentRequested",
                "getModuleContentSucceed",
                "getModuleContentFailed",
                "advertiseEventAfterLogined"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ModifyedComponent",
              "loc": {
                "start": {
                  "line": 55,
                  "column": 54,
                  "index": 1691
                },
                "end": {
                  "line": 55,
                  "column": 71,
                  "index": 1708
                },
                "identifierName": "ModifyedComponent"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["contentActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/ReplenishModal/ReplenishForm.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "uploadActions",
              "sourceValue": "enterpriseFinancing/actions/upload",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/enterpriseFinancing/actions/upload.ts",
              "exportNames": [
                "uploadRequest",
                "uploadSucceed",
                "uploadFailed",
                "uploadInit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ReplenishForm",
              "loc": {
                "start": {
                  "line": 111,
                  "column": 59,
                  "index": 3020
                },
                "end": {
                  "line": 111,
                  "column": 72,
                  "index": 3033
                },
                "identifierName": "ReplenishForm"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["uploadActions"],
          "objectPropertyMap": {
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundExchangeModal/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 32,
                  "column": 59,
                  "index": 848
                },
                "end": {
                  "line": 91,
                  "column": 1,
                  "index": 2728
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundTT/StepOneForm/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 89,
                  "column": 59,
                  "index": 2539
                },
                "end": {
                  "line": 317,
                  "column": 1,
                  "index": 8551
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction"],
          "objectPropertyMap": {
            "push": "push",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Fields/Annex/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 36,
                  "column": 44,
                  "index": 915
                },
                "end": {
                  "line": 103,
                  "column": 1,
                  "index": 3187
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["fileActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Fields/SelectAddressField/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "addrLocsActions",
              "sourceValue": "../../../actions/addressLocations",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/addressLocations.ts",
              "exportNames": [
                "addressLocationsRequested",
                "addressLocationsSucceed",
                "addressLocationsFailed",
                "addressLocationsInitialize",
                "addressLocationsClear",
                "addressLocationsClearList",
                "addressLocationsPreset",
                "addressLocationsCreateRequested",
                "addressLocationsCreateSucceed",
                "addressLocationsCreateFailed",
                "addressLocationsPresetFetchSucceed",
                "stepOneLocCreate",
                "stepTwoLocCreate",
                "queryFullCountriesRequested",
                "queryFullCountriesSucceed",
                "queryFullCountriesFailed",
                "queryEurCountriesRequested",
                "queryEurCountriesSucceed",
                "queryEurCountriesFailed",
                "queryCountriesIfNeeded"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 71,
                  "column": 103,
                  "index": 2166
                },
                "end": {
                  "line": 445,
                  "column": 1,
                  "index": 12505
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["addrLocsActions"],
          "objectPropertyMap": {
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/OrderAddMaterial/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "modalActions",
              "sourceValue": "actions/modal",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/modal.ts",
              "exportNames": [
                "toggleModalStatus",
                "toggleModalWithCallback",
                "toggleGlobalPriorityModalStatus"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "OrderAddMaterial",
              "loc": {
                "start": {
                  "line": 106,
                  "column": 2,
                  "index": 3219
                },
                "end": {
                  "line": 106,
                  "column": 18,
                  "index": 3235
                },
                "identifierName": "OrderAddMaterial"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["modalActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/WithdrawFXApplyForm/cell.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "withdrawActions",
              "sourceValue": "actions/withdraw",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/withdraw.ts",
              "exportNames": [
                "withdrawListRequested",
                "withdrawListSucceed",
                "withdrawListFailed",
                "hideWithdrawListError",
                "resetWithdrawList",
                "changeTab",
                "switchWithdrawApplyModal",
                "setWithdrawApplyIsReserved",
                "withdrawApplyRequested",
                "withdrawApplySucceed",
                "withdrawApplyFailed",
                "hideWithdrawApplyError",
                "setStep",
                "resetWithdrawApply",
                "withdrawInitRequested",
                "withdrawInitSucceed",
                "withdrawInitFailed",
                "hideWithdrawInitError",
                "withdrawDebtRequested",
                "withdrawDebtSucceed",
                "withdrawDebtFailed",
                "hideWithdrawDebtError",
                "removeRelatedItemOrderId",
                "addRelatedItemOrderId",
                "inputChangeRelatedItemValue",
                "resetRelatedOrders",
                "changeRelatedOrderChecked",
                "resetRelatedOrderChecked",
                "swithWithdrawFXApplyModal",
                "setWithdrawFXApplyStep",
                "setWithdrawFXApplyIsReserved",
                "withdrawFXApplyRequested",
                "withdrawFXApplySucceed",
                "withdrawFXApplyFailed",
                "hideWithdrawFXApplyError",
                "resetWithdrawFXApply",
                "isWithdrawErrorPage",
                "getFXWithdrawFeeRequested",
                "getFXWithdrawFeeSucceed",
                "getFXWithdrawFeeFailed",
                "hideGetFXWithdrawFeeError",
                "resetGetFXWithdrawFee",
                "getFXCanRelatedOrderRequested",
                "getFXCanRelatedOrderSucceed",
                "getFXCanRelatedOrderFailed",
                "hideGetFXCanRelatedOrderError",
                "resetGetFXCanRelatedOrder",
                "pushFXCanRelatedOrderRequested",
                "pushFXCanRelatedOrderSucceed",
                "pushFXCanRelatedOrderFailed",
                "swithWithdrawFXReApplyModal",
                "setWithdrawFXReApplyStep",
                "withdrawFXReApplyRequested",
                "withdrawFXReApplySucceed",
                "withdrawFXReApplyFailed",
                "resetWithdrawFXReApply",
                "hideWithdrawFXReApplyError",
                "getWithdrawReApplyItemRequested",
                "getWithdrawReApplyItemSucceed",
                "getWithdrawReApplyItemFailed",
                "resetGetWithdrawReApplyItem",
                "withdrawCheckBothFrozen",
                "withdrawCheckBothFrozenSucceed",
                "withdrawCheckBothFrozenFailed",
                "getFxWithdrawHolderTypeRequested",
                "getFxWithdrawHolderTypeSucceed",
                "getFxWithdrawHolderTypeFailed",
                "withdrawDetailRequested",
                "withdrawDetailSucceed",
                "withdrawDetailFailed",
                "resetWithdrawDetail",
                "withdrawFeeRequested",
                "withdrawFeeSucceed",
                "withdrawFeeFailed",
                "queryAddMaterialInfoRequested",
                "queryAddMaterialInfoSucceed",
                "queryAddMaterialInfoFailed",
                "addMaterialCommitRequested",
                "addMaterialCommitSucceed",
                "addMaterialCommitFailed",
                "resetAddMaterialCommit",
                "cancelFxWithdrawRequested",
                "cancelFxWithdrawSucceed",
                "cancelFxWithdrawFailed",
                "resetCancelFxWithdraw",
                "setCancelFxWithdrawModal",
                "cancelWithdrawRequested",
                "cancelWithdrawSucceed",
                "cancelWithdrawFailed",
                "resetCancelWithdraw",
                "setCancelWithdrawModal",
                "cancelOnGoingTransferRequested",
                "cancelOnGoingTransferSucceed",
                "cancelOnGoingTransferFailed",
                "resetCancelOnGoingTransfer",
                "setCancelOnGoingTransferModal",
                "withdrawSupportCcys",
                "withdrawSupportCcysSucceed",
                "withdrawSupportCcysFailed",
                "transferFeeRequested",
                "transferFeeSucceed",
                "transferFeeFailed",
                "setTransferApplyStep",
                "transferApplyRequested",
                "transferApplySucceed",
                "transferApplyFailed",
                "hideTransferApplyError",
                "resetTransferApply",
                "setTransferStep",
                "queryTransferAddMaterialInfoRequested",
                "queryTransferAddMaterialInfoSucceed",
                "queryTransferAddMaterialInfoFailed",
                "transferAddMaterialCommitRequested",
                "transferAddMaterialCommitSucceed",
                "transferAddMaterialCommitFailed",
                "resetTransferAddMaterialCommit",
                "cancelTransferRequested",
                "cancelTransferSucceed",
                "cancelTransferFailed",
                "resetCancelTransfer",
                "setCancelModal",
                "addCardInfoRequested",
                "addCardInfoSucceed",
                "addCardInfoFailed",
                "querySupportBoostRequested",
                "querySupportBoostSucceed",
                "querySupportBoostFailed",
                "resetQuerySupportBoost",
                "queryCanFastWithdrawWorkRequested",
                "queryCanFastWithdrawWorkFailed",
                "queryCanFastWithdrawWorkSuccess",
                "queryACrossBorderRequested",
                "queryACrossBorderSuccess",
                "queryACrossBorderFailed",
                "getAbRequested",
                "getAbSucceed",
                "getAbFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 228,
                  "column": 2,
                  "index": 7754
                },
                "end": {
                  "line": 228,
                  "column": 7,
                  "index": 7759
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["withdrawActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/NewModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "goBack",
              "importedName": "goBack",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 24,
                  "column": 41,
                  "index": 722
                },
                "end": {
                  "line": 53,
                  "column": 1,
                  "index": 1669
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "goBack": "goBack"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/TransferApplyForm/StepOne/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "idsActions",
              "sourceValue": "actions/ids",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ids.ts",
              "exportNames": ["setIds", "setCurIds", "resetIds"]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 652,
                  "column": 2,
                  "index": 18477
                },
                "end": {
                  "line": 652,
                  "column": 7,
                  "index": 18482
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["idsActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/ExchangeModal/StepOne/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "countdownAction",
              "sourceValue": "actions/countdown",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/countdown.ts",
              "exportNames": ["setCountDown", "setSeconds", "stopSeconds"]
            },
            {
              "isNamespace": true,
              "localName": "spotAction",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 68,
                  "column": 70,
                  "index": 2103
                },
                "end": {
                  "line": 274,
                  "column": 1,
                  "index": 8435
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["countdownAction", "spotAction"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Modal/ExchangeModal/StepTwo/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "countdownAction",
              "sourceValue": "actions/countdown",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/countdown.ts",
              "exportNames": ["setCountDown", "setSeconds", "stopSeconds"]
            },
            {
              "isNamespace": true,
              "localName": "fundSwapActions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            },
            {
              "isNamespace": true,
              "localName": "stepActions",
              "sourceValue": "actions/step",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/step.ts",
              "exportNames": ["setStep"]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 38,
                  "column": 60,
                  "index": 1188
                },
                "end": {
                  "line": 158,
                  "column": 1,
                  "index": 4567
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "refundAction",
            "countdownAction",
            "fundSwapActions",
            "stepActions"
          ],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Action/components/DetailsAndResult/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "Index",
              "loc": {
                "start": {
                  "line": 183,
                  "column": 62,
                  "index": 4289
                },
                "end": {
                  "line": 183,
                  "column": 67,
                  "index": 4294
                },
                "identifierName": "Index"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/BasicSet/BasicSetPreview/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "passwordActions",
              "sourceValue": "actions/password",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/password.ts",
              "exportNames": [
                "modifyTradePasswordRequested",
                "modifyTradePasswordSucceed",
                "modifyTradePasswordFailed",
                "initModifyTradePassword",
                "forgotTradePasswordRequested",
                "forgotTradePasswordSucceed",
                "forgotTradePasswordFailed",
                "initForgotTradePassword",
                "setTradePasswordRequested",
                "setTradePasswordSucceed",
                "setTradePasswordFailed",
                "initSetTradePassword",
                "modifyLoginPasswordRequested",
                "modifyLoginPasswordSucceed",
                "modifyLoginPasswordFailed",
                "setModifyLoginPasswordStep",
                "resetModifyLoginPassword",
                "hideModifyLoginPasswordError",
                "initLoginPasswordRequested",
                "initLoginPasswordSucceed",
                "initLoginPasswordFailed",
                "initInitLoginPassword"
              ]
            },
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            },
            {
              "isNamespace": true,
              "localName": "basicSetActions",
              "sourceValue": "actions/basicSet",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/basicSet.ts",
              "exportNames": [
                "createOrUpdateFirmInfoRequested",
                "createOrUpdateFirmInfoSucceed",
                "createOrUpdateFirmInfoFailed",
                "hideCreateOrUpdateFirmInfoError",
                "resetCreateOrUpdateFirmStepInfo",
                "setNextButtonLoading",
                "setFirmVerificationStep",
                "setFirmVerificationDifferCellsFlag",
                "clearFirmVerificationDifferCellsFlag",
                "toggleOtherArea",
                "updateTargetFirmItem",
                "saveUpdateData"
              ]
            },
            {
              "isNamespace": true,
              "localName": "orderActions",
              "sourceValue": "actions/order",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/order.ts",
              "exportNames": [
                "switchCreateOrderSuccessModal",
                "createOrderRequested",
                "createOrderSucceed",
                "createOrderFailed",
                "hideCreateOrdeError",
                "updateOneOrderRequested",
                "updateOneOrderSucceed",
                "updateOneOrderFailed",
                "updateTabKey",
                "updateContractStatusRequested",
                "updateContractStatusSucceed",
                "updateContractStatusFailed",
                "initialAnnexs4CRM",
                "setCompanyPanel"
              ]
            },
            {
              "isNamespace": true,
              "localName": "infoActions",
              "sourceValue": "actions/info",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/info.ts",
              "exportNames": [
                "fetchTripartiteFirmRequested",
                "fetchTripartiteFirmSucceed",
                "fetchTripartiteFirmFailed",
                "fetchTripartiteUserRequested",
                "fetchTripartiteUserSucceed",
                "fetchTripartiteUserFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "utilActions",
              "sourceValue": "actions/util",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/util.ts",
              "exportNames": [
                "pubKeyRequested",
                "pubKeySucceed",
                "pubKeyFailed",
                "toggleOrderAnnexUpload",
                "setIsMobile",
                "getFirmStatusRequested",
                "getFirmStatusSucceed",
                "getFirmStatusFailed",
                "setPreviewPageId",
                "setCountrys",
                "setProvinces",
                "setLoadAddress",
                "getLocationRequested",
                "getLocationSucceed",
                "getLocationFailed",
                "touchAndChangeAddressFields",
                "resetAddressFieldsThenSetCountry"
              ]
            },
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "fetchMetaRequested",
              "importedName": "fetchMetaRequested",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 118,
                  "column": 65,
                  "index": 4421
                },
                "end": {
                  "line": 1016,
                  "column": 1,
                  "index": 37117
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "passwordActions",
            "fileActions",
            "basicSetActions",
            "orderActions",
            "infoActions",
            "utilActions",
            "metaActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "change": "change",
            "touch": "touch",
            "fetchMetaRequested": "fetchMetaRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/SubbranchField/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "touch",
              "importedName": "touch",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "SubbranchField",
              "loc": {
                "start": {
                  "line": 104,
                  "column": 102,
                  "index": 2703
                },
                "end": {
                  "line": 104,
                  "column": 116,
                  "index": 2717
                },
                "identifierName": "SubbranchField"
              }
            },
            {
              "type": "Identifier",
              "name": "SubbranchField",
              "loc": {
                "start": {
                  "line": 108,
                  "column": 2,
                  "index": 2832
                },
                "end": {
                  "line": 108,
                  "column": 16,
                  "index": 2846
                },
                "identifierName": "SubbranchField"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "change": "change",
            "touch": "touch"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/LimitPage/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "depositLimitRequested",
              "importedName": "depositLimitRequested",
              "sourceValue": "actions/collection",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/collection.ts"
            }
          ],
          "actionsComponents": [],
          "warnings": [
            "[Warning] #230 lastArguments.length !== 1 (start line: 52, start column: 18, end line: 52",
            ", end column: 62)"
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "depositLimitRequested": "depositLimitRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/XtBean/components/XtBeanAuthModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "authActions",
              "sourceValue": "actions/auth",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/auth.ts",
              "exportNames": [
                "oauthRequested",
                "oauthSucceed",
                "logoutRequested",
                "logoutSucceed",
                "unauthorized",
                "signInRequested",
                "signInSucceed",
                "signInFailed",
                "initSignIn",
                "wechatSignInRequested",
                "wechatSignInSucceed",
                "wechatSignInFailed",
                "setWechatSignInSliderData",
                "setWechatSignInSliderError",
                "initWechatSignIn",
                "setWechatSignInState",
                "pollingQRScannedRequested",
                "pollingQRScannedSucceed",
                "pollingQRScannedFailed",
                "pollingQRConfirmedRequested",
                "pollingQRConfirmedSucceed",
                "pollingQRConfirmedFailed",
                "resetQRConfirmed",
                "qrcodeSigninRequested"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "XtBeanAuthModal",
              "loc": {
                "start": {
                  "line": 205,
                  "column": 48,
                  "index": 6545
                },
                "end": {
                  "line": 205,
                  "column": 63,
                  "index": 6560
                },
                "identifierName": "XtBeanAuthModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "authActions",
            "securityActions",
            "securityActions",
            "vcodeActions",
            "userActions"
          ],
          "objectPropertyMap": {
            "change": "change",
            "push": "push",
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Benefit/CustomerPlan/components/table/CustomerPackageUsage.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 25,
                  "column": 75,
                  "index": 730
                },
                "end": {
                  "line": 114,
                  "column": 1,
                  "index": 3476
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/GrantFxWithdraw/component/ExchangeOperation/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "ExchangeOperation",
              "loc": {
                "start": {
                  "line": 384,
                  "column": 3,
                  "index": 10262
                },
                "end": {
                  "line": 384,
                  "column": 20,
                  "index": 10279
                },
                "identifierName": "ExchangeOperation"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/SettlementProviders/ProvidersForm/components/StepOne.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "destroy",
              "importedName": "destroy",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepOne",
              "loc": {
                "start": {
                  "line": 367,
                  "column": 3,
                  "index": 10651
                },
                "end": {
                  "line": 367,
                  "column": 10,
                  "index": 10658
                },
                "identifierName": "StepOne"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "change": "change",
            "destroy": "destroy"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/SettlementProviders/ProvidersForm/components/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "setMFAVisible",
              "importedName": "setMFAVisible",
              "sourceValue": "actions/xshield",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/xshield.ts"
            },
            {
              "isNamespace": false,
              "localName": "passwdConfirmCb",
              "importedName": "passwdConfirmCb",
              "sourceValue": "actions/exchange",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/exchange.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "StepTwo",
              "loc": {
                "start": {
                  "line": 131,
                  "column": 2,
                  "index": 4038
                },
                "end": {
                  "line": 131,
                  "column": 9,
                  "index": 4045
                },
                "identifierName": "StepTwo"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "setMFAVisible": "setMFAVisible",
            "passwdConfirmCb": "passwdConfirmCb"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/Segments/BeneficiaryAddressBeneficiaryAddressSegment/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "metaActions",
              "sourceValue": "actions/meta",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/meta.ts",
              "exportNames": [
                "fetchMetaRequested",
                "fetchMetaSucceed",
                "fetchMetaFailed",
                "resetFetchMeta",
                "hideFetchMetaError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "statusActions",
              "sourceValue": "actions/status",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/status.ts",
              "exportNames": ["toggleEntityStatus"]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 84,
                  "column": 67,
                  "index": 2363
                },
                "end": {
                  "line": 269,
                  "column": 1,
                  "index": 8034
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["metaActions", "statusActions"],
          "objectPropertyMap": {
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/bizComponents/OrderFormDrawer/CreateOrderForm/index.tsx",
      "localConnect": "connect",
      "localCompose": "compose",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "createTips",
              "importedName": "createTips",
              "sourceValue": "actions/tip",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/tip.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "PlatformGuard",
              "loc": {
                "start": {
                  "line": 122,
                  "column": 1,
                  "index": 3015
                },
                "end": {
                  "line": 122,
                  "column": 14,
                  "index": 3028
                },
                "identifierName": "PlatformGuard"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "createTips": "createTips"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/RegisterForm/StepOne.jsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/register",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/register.ts",
              "exportNames": [
                "registerStepOneRequested",
                "registerStepOneSucceed",
                "registerStepOneFailed",
                "hideRegisterStepOneError",
                "registerStepTwoRequested",
                "registerStepTwoSucceed",
                "registerStepTwoFailed",
                "hideRegisterStepTwoError",
                "setRegisterStep",
                "resetRegister"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            },
            {
              "isNamespace": true,
              "localName": "submitActions",
              "sourceValue": "actions/submit",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/submit.ts",
              "exportNames": [
                "submitRequested",
                "submitSucceed",
                "submitFailed",
                "resetSubmit"
              ]
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 82,
                  "column": 59,
                  "index": 2373
                },
                "end": {
                  "line": 200,
                  "column": 1,
                  "index": 5936
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [
            "userActions",
            "vcodeActions",
            "actions",
            "securityActions",
            "submitActions"
          ],
          "objectPropertyMap": {
            "change": "change",
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/RegisterForm/StepTwo.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "actions",
              "sourceValue": "actions/register",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/register.ts",
              "exportNames": [
                "registerStepOneRequested",
                "registerStepOneSucceed",
                "registerStepOneFailed",
                "hideRegisterStepOneError",
                "registerStepTwoRequested",
                "registerStepTwoSucceed",
                "registerStepTwoFailed",
                "hideRegisterStepTwoError",
                "setRegisterStep",
                "resetRegister"
              ]
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 82,
                  "column": 59,
                  "index": 2585
                },
                "end": {
                  "line": 204,
                  "column": 1,
                  "index": 6214
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["actions"],
          "objectPropertyMap": {
            "initialize": "initialize"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/CreateOrderForm/components/AssociateCrmOrder/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "AssociateCrmOrder",
              "loc": {
                "start": {
                  "line": 334,
                  "column": 24,
                  "index": 10017
                },
                "end": {
                  "line": 334,
                  "column": 41,
                  "index": 10034
                },
                "identifierName": "AssociateCrmOrder"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "change": "change",
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/TicketModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "ticketActions",
              "sourceValue": "actions/ticket",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ticket.ts",
              "exportNames": [
                "ticketListRequested",
                "ticketListSucceed",
                "ticketListFailed"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "TicketModal",
              "loc": {
                "start": {
                  "line": 109,
                  "column": 2,
                  "index": 2530
                },
                "end": {
                  "line": 109,
                  "column": 13,
                  "index": 2541
                },
                "identifierName": "TicketModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["ticketActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Crm/SideFunctions/components/HelpPanel/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "getTagFaqRequested",
              "importedName": "getTagFaqRequested",
              "sourceValue": "actions/faq",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/faq.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "HelpPanel",
              "loc": {
                "start": {
                  "line": 92,
                  "column": 2,
                  "index": 2207
                },
                "end": {
                  "line": 92,
                  "column": 11,
                  "index": 2216
                },
                "identifierName": "HelpPanel"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "getTagFaqRequested": "getTagFaqRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Crm/SideFunctions/components/AdviseModal/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "securityActions",
              "importedName": "securityActions",
              "sourceValue": "actions",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/index.ts"
            },
            {
              "isNamespace": false,
              "localName": "userActions",
              "importedName": "userActions",
              "sourceValue": "actions",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/index.ts"
            },
            {
              "isNamespace": false,
              "localName": "initialize",
              "importedName": "initialize",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            },
            {
              "isNamespace": false,
              "localName": "change",
              "importedName": "change",
              "sourceValue": "redux-form/es/immutable",
              "dependencyPath": "redux-form/es/immutable"
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "AdviseModal",
              "loc": {
                "start": {
                  "line": 197,
                  "column": 3,
                  "index": 5409
                },
                "end": {
                  "line": 197,
                  "column": 14,
                  "index": 5420
                },
                "identifierName": "AdviseModal"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["securityActions", "userActions"],
          "objectPropertyMap": {
            "initialize": "initialize",
            "change": "change"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundExchangeModal/StepOne/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "countdownAction",
              "sourceValue": "actions/countdown",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/countdown.ts",
              "exportNames": ["setCountDown", "setSeconds", "stopSeconds"]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 65,
                  "column": 46,
                  "index": 2023
                },
                "end": {
                  "line": 284,
                  "column": 1,
                  "index": 8985
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction", "countdownAction"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundExchangeModal/StepTwo/index.js",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "refundAction",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts",
              "exportNames": [
                "setRefundExchangeModal",
                "refundExchangeRequested",
                "refundExchangeSucceed",
                "refundExchangeFailed",
                "refundExchangeInit",
                "exchangeRateRequested",
                "exchangeRateSucceed",
                "exchangeRateFailed",
                "exchangeRateInit",
                "refundApplyRequested",
                "refundApplySucceed",
                "refundApplyFailed",
                "refundApplyInit",
                "setRefundStep",
                "setFxRequestId",
                "refundExchangeAvailableRequested",
                "refundExchangeAvailableSucceed",
                "refundExchangeAvailableFailed",
                "checkFieldRequested",
                "checkSwiftCodeRequested",
                "checkFieldSucceed",
                "checkFieldFailed",
                "refundReasonRequested",
                "refundReasonSucceed",
                "refundReasonFailed",
                "refundLocCreateRequested",
                "refundLocCreateSucceed",
                "refundLocCreateFailed",
                "beneficiaryMsgRequested",
                "beneficiaryMsgSucceed",
                "beneficiaryMsgFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "countdownAction",
              "sourceValue": "actions/countdown",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/countdown.ts",
              "exportNames": ["setCountDown", "setSeconds", "stopSeconds"]
            },
            {
              "isNamespace": true,
              "localName": "fundSwapActions",
              "sourceValue": "actions/fundSwap",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/fundSwap.ts",
              "exportNames": [
                "setTradeStep",
                "getRateRequested",
                "getRateSucceed",
                "getRateFailed",
                "hideGetRateError",
                "rateReset",
                "tradeRequested",
                "tradeSucceed",
                "tradeFailed",
                "resetTrade",
                "hideTradeFailed",
                "tradeListRequested",
                "tradeListSucceed",
                "tradeListFailed",
                "hideTradeListFailed",
                "updateStatus",
                "setSeconds",
                "stopSeconds",
                "getBalance",
                "getBalanceSucceed",
                "getBalanceFailed",
                "resetBalance",
                "getFxDetail",
                "getFxDetailSucceed",
                "getFxDetailFailed",
                "spotfxMeta",
                "spotfxMetaSucceed",
                "spotfxMetaFailed",
                "resetSpotFxMeta",
                "changeExchangeWay",
                "entrustRequested",
                "entrustSucceed",
                "entrustFailed",
                "hideEntrustError",
                "resetEntrust",
                "entrustRateRequested",
                "entrustRateSucceed",
                "entrustRateFailed",
                "hideEntrustRateError",
                "resetEntrustRate",
                "billExportDownloadRequested",
                "billExportDownloadSucceed",
                "billExportDownloadFailed",
                "toggleBillExportDownloadModal",
                "resetBillExportDownload",
                "enterAccountRequested",
                "enterAccountSucceed",
                "enterAccountFailed",
                "cancelEntrustRequested",
                "cancelEntrustSucceed",
                "cancelEntrustFailed",
                "hideCancelEntrustError",
                "resetCancelEntrust",
                "toggleCancelEntrustPwdModal",
                "tradeMoreListRequested",
                "tradeMoreListSucceed",
                "tradeMoreListFailed",
                "clearMore",
                "queryExchangeArrivalRequested",
                "queryExchangeArrivalSucceed",
                "queryExchangeArrivalFailed",
                "initExchangeArrival",
                "spotBuyRateRequested",
                "spotBuyRateSucceed",
                "spotBuyRateFailed",
                "spotApplyRequested",
                "spotApplySucceed",
                "spotApplyFailed",
                "spotResultRequested",
                "spotResultSucceed",
                "spotResultFailed",
                "spotResultInit"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 33,
                  "column": 61,
                  "index": 940
                },
                "end": {
                  "line": 159,
                  "column": 1,
                  "index": 4657
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["refundAction", "countdownAction", "fundSwapActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/BasicSet/BasicSetPreview/DifferCells.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "basicSetActions",
              "sourceValue": "actions/basicSet",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/basicSet.ts",
              "exportNames": [
                "createOrUpdateFirmInfoRequested",
                "createOrUpdateFirmInfoSucceed",
                "createOrUpdateFirmInfoFailed",
                "hideCreateOrUpdateFirmInfoError",
                "resetCreateOrUpdateFirmStepInfo",
                "setNextButtonLoading",
                "setFirmVerificationStep",
                "setFirmVerificationDifferCellsFlag",
                "clearFirmVerificationDifferCellsFlag",
                "toggleOtherArea",
                "updateTargetFirmItem",
                "saveUpdateData"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "DifferCells",
              "loc": {
                "start": {
                  "line": 417,
                  "column": 2,
                  "index": 14511
                },
                "end": {
                  "line": 417,
                  "column": 13,
                  "index": 14522
                },
                "identifierName": "DifferCells"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["basicSetActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Settings/BasicSet/BasicSetPreview/InfoCell.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "fileActions",
              "sourceValue": "actions/file",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/file.ts",
              "exportNames": [
                "uploadFileRequested",
                "uploadFileSucceed",
                "uploadFileFailed",
                "hideUploadFileError",
                "deleteFile",
                "deleteSyncFile",
                "resetFile",
                "resetCreateTransferAccountFile",
                "resetAllFile",
                "fileDownload",
                "getThumbnailRequested",
                "getThumbnailSucceed",
                "getThumbnailFailed",
                "initGetThumbnail",
                "setAnnexeRenameModal",
                "updateAnnexeFileName"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 33,
                  "column": 33,
                  "index": 992
                },
                "end": {
                  "line": 329,
                  "column": 1,
                  "index": 11287
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["fileActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Header/WXHeader/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "authActions",
              "sourceValue": "actions/auth",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/auth.ts",
              "exportNames": [
                "oauthRequested",
                "oauthSucceed",
                "logoutRequested",
                "logoutSucceed",
                "unauthorized",
                "signInRequested",
                "signInSucceed",
                "signInFailed",
                "initSignIn",
                "wechatSignInRequested",
                "wechatSignInSucceed",
                "wechatSignInFailed",
                "setWechatSignInSliderData",
                "setWechatSignInSliderError",
                "initWechatSignIn",
                "setWechatSignInState",
                "pollingQRScannedRequested",
                "pollingQRScannedSucceed",
                "pollingQRScannedFailed",
                "pollingQRConfirmedRequested",
                "pollingQRConfirmedSucceed",
                "pollingQRConfirmedFailed",
                "resetQRConfirmed",
                "qrcodeSigninRequested"
              ]
            },
            {
              "isNamespace": true,
              "localName": "uiActions",
              "sourceValue": "actions/ui",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ui.ts",
              "exportNames": [
                "toggleMobileNavSidebar",
                "toggleSubAppLoading",
                "setSubAppError"
              ]
            },
            {
              "isNamespace": true,
              "localName": "wechatActions",
              "sourceValue": "actions/wechat",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/wechat.ts",
              "exportNames": [
                "wechatAuthRequested",
                "wechatAuthSucceed",
                "wechatAuthFailed",
                "expandOneAndCloseOthers",
                "unbindWechatRequested",
                "unbindWechatSucceed",
                "unbindWechatFailed",
                "toggleUnbindWechatModal",
                "resetUnbindWechat",
                "wechatConfigRequested",
                "wechatConfigSucceed",
                "wechatConfigFailed"
              ]
            },
            {
              "isNamespace": false,
              "localName": "push",
              "importedName": "push",
              "sourceValue": "react-router-redux",
              "dependencyPath": "react-router-redux"
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 43,
                  "column": 58,
                  "index": 1144
                },
                "end": {
                  "line": 134,
                  "column": 1,
                  "index": 3764
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["authActions", "uiActions", "wechatActions"],
          "objectPropertyMap": {
            "push": "push"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/UsingTicket/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "idsActions",
              "sourceValue": "actions/ids",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/ids.ts",
              "exportNames": ["setIds", "setCurIds", "resetIds"]
            }
          ],
          "actionsComponents": [
            {
              "type": "ClassBody",
              "loc": {
                "start": {
                  "line": 120,
                  "column": 53,
                  "index": 3270
                },
                "end": {
                  "line": 238,
                  "column": 1,
                  "index": 6827
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["idsActions"],
          "objectPropertyMap": {}
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/containers/App/Dashboard/Fund/Refund/RefundTT/StepTwo/formilyCom/Input/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": false,
              "localName": "checkFieldSucceed",
              "importedName": "checkFieldSucceed",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts"
            },
            {
              "isNamespace": false,
              "localName": "checkFieldRequested",
              "importedName": "checkFieldRequested",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts"
            },
            {
              "isNamespace": false,
              "localName": "checkSwiftCodeRequested",
              "importedName": "checkSwiftCodeRequested",
              "sourceValue": "actions/refund",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/refund.ts"
            }
          ],
          "actionsComponents": [
            {
              "type": "CallExpression",
              "loc": {
                "start": {
                  "line": 32,
                  "column": 1,
                  "index": 1021
                },
                "end": {
                  "line": 153,
                  "column": 3,
                  "index": 5013
                }
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": [],
          "objectPropertyMap": {
            "checkFieldSucceed": "checkFieldSucceed",
            "checkFieldRequested": "checkFieldRequested",
            "checkSwiftCodeRequested": "checkSwiftCodeRequested"
          }
        }
      ]
    },
    {
      "filePath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/components/Form/FirmVerification/stepThree/PhoneVerification/index.tsx",
      "localConnect": "connect",
      "localCompose": "",
      "groups": [
        {
          "actionsDependencies": [
            {
              "isNamespace": true,
              "localName": "userActions",
              "sourceValue": "actions/user",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/user.ts",
              "exportNames": [
                "getUserFlowId",
                "getUserFlowIdAndCaptcha",
                "getUserFlowIdSucceed",
                "getUserFlowIdFailed",
                "initUserFlowId",
                "getUserCaptcha",
                "getUserCaptchaSucceed",
                "getUserCaptchaFailed",
                "initUserCaptcha",
                "verifyMfaRequested",
                "verifyMfaSucceed",
                "verifyMfaFailed",
                "initVerifyMfa",
                "setAuthId",
                "resetAuthId",
                "executeAuthIdCallBackRequested",
                "executeAuthIdCallBackSucceed",
                "executeAuthIdCallBackFailed",
                "sendMfaMessageRequested",
                "getMfaCaptchaRequested",
                "getMfaCaptchaSucceed",
                "getMfaCaptchaFailed",
                "initMfaCaptcha",
                "getWhiteListRequested",
                "getWhiteListSucceed",
                "getWhiteListFailed",
                "getWhiteListInit",
                "setMfaJson",
                "resetMfaJson",
                "queryIndustryRequested",
                "queryIndustrySucceed",
                "queryIndustryFailed",
                "queryRestrictionList",
                "queryRestrictionListSucceed",
                "queryRestrictionListFailed"
              ]
            },
            {
              "isNamespace": true,
              "localName": "vcodeActions",
              "sourceValue": "actions/vcode",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/vcode.ts",
              "exportNames": [
                "updateCountDownSeconds",
                "stopVcodeCountDown",
                "sendVcodeMessage",
                "sendVcodeMessageSucceed",
                "sendVcodeMessageFailed",
                "hideVcodeTip"
              ]
            },
            {
              "isNamespace": true,
              "localName": "securityActions",
              "sourceValue": "actions/security",
              "dependencyPath": "/Users/alexwang/workspace/xTransfer/mfe-user-fund/shared/actions/security.ts",
              "exportNames": [
                "checkABVType",
                "openABVPanel",
                "closeABVPanel",
                "validateCaptchaRequested",
                "validateCaptchaSucceed",
                "validateCaptchaFailed",
                "initValidateCaptcha",
                "setABVVeriType",
                "logSliderVeriInfo",
                "updateXRateLimitRoute"
              ]
            }
          ],
          "actionsComponents": [
            {
              "type": "Identifier",
              "name": "PhoneVerification",
              "loc": {
                "start": {
                  "line": 129,
                  "column": 2,
                  "index": 3750
                },
                "end": {
                  "line": 129,
                  "column": 19,
                  "index": 3767
                },
                "identifierName": "PhoneVerification"
              }
            }
          ],
          "unknownElements": [],
          "spreadElementNames": ["userActions", "vcodeActions", "securityActions"],
          "objectPropertyMap": {}
        }
      ]
    }
  ]
}
